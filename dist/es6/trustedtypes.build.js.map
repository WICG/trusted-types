{"version":3,"sources":["src/data/trustedtypeconfig.js","src/trustedtypes.js","src/utils/wrapper.js","src/enforcer.js","src/polyfill/api_only.js","src/polyfill/full.js"],"names":["parseCSP","cspString","WHITESPACE","trim","split","SEMICOLON","map","serializedDirective","reduce","parsed","directive","slice","s","sort","fromCSP","policy","TrustedTypeConfig$$module$src$data$trustedtypeconfig.parseCSP","enforce","DIRECTIVE_NAME","policies","filter","p","charAt","TrustedTypeConfig","isLoggingEnabled","isEnforcementEnabled","allowedPolicyNames","rejectInputFn","TypeError","toLowerCase","toUpperCase","String","prototype","TrustedTypePolicy","TrustedTypePolicyFactory","TrustedTypes","setAllowedPolicyNames","getDefaultPolicy","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","result","allowedValue","o","factory","createTypeMapping","writable","configurable","enumerable","getTypeInternal_","tag","container","elNs","attrNs","canonicalTag","apply","ns","HTML_NS","hasOwnProperty","TYPE_MAP","assign","Object","forEach","push","Array","Symbol","WeakMap","policyNames","allowedNames","defaultPolicy","enforceNameWhitelist","TrustedType","TrustedURL","TrustedScriptURL","TrustedHTML","TrustedScript","XLINK_NS","SVG_NS","ATTR_PROPERTY_MAP","HTMLIFrameElement","keys","attr","HTMLElement","createFunctionAllowed","api","createPolicy","indexOf","call","console","warn","wrappedPolicy","DEFAULT_POLICY_NAME","getPolicyNames","isHTML","isURL","isScriptURL","isScript","getAttributeType","tagName","attribute","elementNs","attributeNs","canonicalAttr","getPropertyType","property","getTypeMapping","namespaceUri","document","documentElement","namespaceURI","e","JSON","parse","stringify","length","el","resetDefaultPolicy","splice","installFunction","object","fn","Reflect","getOwnPropertyDescriptor","UrlConstructor","window","URL","constructor","stringifyForRangeHack","doc","createRange","r","createContextualFragment","f","toString","childNodes","getConstructorName_","createElement","match","windowOpenObject","insertAdjacentHTMLObject","Element","SecurityPolicyViolationEvent","typeMap","STRING_TO_TYPE","attrs","k","entries","TYPE_CHECKER_MAP","TYPE_PRODUCER_MAP","wrapSetter_","enforcingSetter","that","enforce_","originalSetter","useObject","descriptor","stopAt","Node","Function","originalSetters_","wrapWithEnforceFunction_","argNumber","wrapFunction_","originalFn","args","wrapSetAttribute_","setAttributeWrapper_","bind","setAttributeNSWrapper_","functionBody","TrustedTypesEnforcer","config","config_","context","attrName","requiredType","propertyName","typeToEnforce","typeName","isInlineEventHandler","fallbackPolicy","exceptionThrown","fallbackValue","contextName","message","blockedURI","baseURI","href","valueSlice","event","location","isConnected","dispatchEvent","publicApi","tt","detectPolicy","currentScript","scripts","getElementsByTagName","bodyPrefix","textContent","substr","dataset","cspInMeta","head","querySelector","csp","TrustedTypeConfig$$module$src$data$trustedtypeconfig.fromCSP","trustedTypesEnforcer","ShadowRoot","Range","Document","HTMLDocument","DOMParser","installPropertySetWrappers_"],"mappings":"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","file":"trustedtypes.build.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * CSP Directive name controlling Trusted Types behavior.\n * @type {string}\n */\nexport const DIRECTIVE_NAME = 'trusted-types';\n\n/**\n * A configuration object for trusted type enforcement.\n */\nexport class TrustedTypeConfig {\n  /**\n   * @param {boolean} isLoggingEnabled If true enforcement wrappers will log\n   *   violations to the console.\n   * @param {boolean} isEnforcementEnabled If true enforcement is enabled at\n   *   runtime.\n   * @param {Array<string>} allowedPolicyNames Whitelisted policy names.\n   * @param {?string} cspString String with the CSP policy.\n   */\n  constructor(isLoggingEnabled,\n      isEnforcementEnabled,\n      allowedPolicyNames,\n      cspString = null) {\n    /**\n      * True if logging is enabled.\n      * @type {boolean}\n      */\n    this.isLoggingEnabled = isLoggingEnabled;\n\n    /**\n      * True if enforcement is enabled.\n      * @type {boolean}\n      */\n    this.isEnforcementEnabled = isEnforcementEnabled;\n\n    /**\n     * Allowed policy names.\n     * @type {Array<string>}\n     */\n    this.allowedPolicyNames = allowedPolicyNames;\n\n    /**\n     * CSP string that defined the policy.\n     * @type {?string}\n     */\n    this.cspString = cspString;\n  }\n\n  /**\n   * Parses a CSP policy.\n   * @link https://www.w3.org/TR/CSP3/#parse-serialized-policy\n   * @param  {string} cspString String with a CSP definition.\n   * @return {Object<string,Array<string>>} Parsed CSP, keyed by directive\n   *   names.\n   */\n  static parseCSP(cspString) {\n    const SEMICOLON = /\\s*;\\s*/;\n    const WHITESPACE = /\\s+/;\n    return cspString.trim().split(SEMICOLON)\n        .map((serializedDirective) => serializedDirective.split(WHITESPACE))\n        .reduce(function(parsed, directive) {\n          if (directive[0]) {\n            parsed[directive[0]] = directive.slice(1).map((s) => s).sort();\n          }\n          return parsed;\n        }, {});\n  }\n\n  /**\n   * Creates a TrustedTypeConfig object from a CSP string.\n   * @param  {string} cspString\n   * @return {!TrustedTypeConfig}\n   */\n  static fromCSP(cspString) {\n    const isLoggingEnabled = true;\n    const policy = TrustedTypeConfig.parseCSP(cspString);\n    const enforce = DIRECTIVE_NAME in policy;\n    let policies = ['*'];\n    if (enforce) {\n      policies = policy[DIRECTIVE_NAME].filter((p) => p.charAt(0) !== '\\'');\n    }\n\n    return new TrustedTypeConfig(\n        isLoggingEnabled,\n        enforce, /* isEnforcementEnabled */\n        policies, /* allowedPolicyNames */\n        cspString\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst rejectInputFn = (s) => {\n  throw new TypeError('undefined conversion');\n};\n\nconst {toLowerCase, toUpperCase} = String.prototype;\n\nexport const HTML_NS = 'http://www.w3.org/1999/xhtml';\nexport const XLINK_NS = 'http://www.w3.org/1999/xlink';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\n\n/**\n * @constructor\n * @property {!function(string):TrustedHTML} createHTML\n * @property {!function(string):TrustedURL} createURL\n * @property {!function(string):TrustedScriptURL} createScriptURL\n * @property {!function(string):TrustedScript} createScript\n * @property {!string} name\n */\nexport const TrustedTypePolicy = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/**\n * @constructor\n */\nexport const TrustedTypePolicyFactory = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nconst TrustedTypesInnerPolicy = {};\n\n/**\n * @typedef {!Object<string, {\n *   attributes: !Object<string, string>,\n *   properties: !Object<string, string>}>}\n */\nconst TrustedTypesTypeMap = {};\n/* eslint-enable no-unused-vars */\n\nexport const DEFAULT_POLICY_NAME = 'default';\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {hasOwnProperty} = ObjectPrototype;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (const key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * A reference to a default policy, if created.\n   * @type {TrustedTypePolicy}\n   */\n  let defaultPolicy = null;\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n          {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * A map of attribute / property names to allowed types\n   * for known namespaces.\n   * @type {!Object<string,!TrustedTypesTypeMap>}\n   * @export\n   */\n  const TYPE_MAP = {\n    [HTML_NS]: {\n      // TODO(koto): Figure out what to to with <link>\n      'A': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'AREA': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'AUDIO': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'BASE': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'BUTTON': {\n        'attributes': {\n          'formaction': TrustedURL.name,\n        },\n      },\n      'EMBED': {\n        'attributes': {\n          'src': TrustedScriptURL.name,\n        },\n      },\n      'FORM': {\n        'attributes': {\n          'action': TrustedURL.name,\n        },\n      },\n      'FRAME': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'IFRAME': {\n        'attributes': {\n          'src': TrustedURL.name,\n          'srcdoc': TrustedHTML.name,\n        },\n      },\n      'IMG': {\n        'attributes': {\n          'src': TrustedURL.name,\n          // TODO(slekies): add special handling for srcset\n        },\n      },\n      'INPUT': {\n        'attributes': {\n          'src': TrustedURL.name,\n          'formaction': TrustedURL.name,\n        },\n      },\n      'LINK': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'OBJECT': {\n        'attributes': {\n          'data': TrustedScriptURL.name,\n          'codebase': TrustedScriptURL.name,\n        },\n      },\n      // TODO(koto): Figure out what to do with portals.\n      'SCRIPT': {\n        'attributes': {\n          'src': TrustedScriptURL.name,\n          'text': TrustedScript.name,\n        },\n        'properties': {\n          'innerText': TrustedScript.name,\n          'textContent': TrustedScript.name,\n          'text': TrustedScript.name,\n        },\n      },\n      'SOURCE': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'TRACK': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'VIDEO': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      '*': {\n        'attributes': {},\n        'properties': {\n          'innerHTML': TrustedHTML.name,\n          'outerHTML': TrustedHTML.name,\n        },\n      },\n    },\n    [XLINK_NS]: {\n      '*': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n        'properties': {},\n      },\n    },\n    [SVG_NS]: {\n      '*': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n        'properties': {},\n      },\n    },\n  };\n\n  /**\n   * A map of element property to HTML attribute names.\n   * @type {!Object<string, string>}\n   */\n  const ATTR_PROPERTY_MAP = {\n    'codebase': 'codeBase',\n    'formaction': 'formAction',\n  };\n\n  // Edge doesn't support srcdoc.\n  if (!('srcdoc' in HTMLIFrameElement.prototype)) {\n    delete TYPE_MAP[HTML_NS]['IFRAME']['attributes']['srcdoc'];\n  }\n\n  // in HTML, clone attributes into properties.\n  for (const tag of Object.keys(TYPE_MAP[HTML_NS])) {\n    if (!TYPE_MAP[HTML_NS][tag]['properties']) {\n      TYPE_MAP[HTML_NS][tag]['properties'] = {};\n    }\n    for (const attr of Object.keys(TYPE_MAP[HTML_NS][tag]['attributes'])) {\n      TYPE_MAP[HTML_NS][tag]['properties'][\n          ATTR_PROPERTY_MAP[attr] ? ATTR_PROPERTY_MAP[attr] : attr\n      ] = TYPE_MAP[HTML_NS][tag]['attributes'][attr];\n    }\n  }\n\n  // Add inline event handlers attribute names.\n  for (const name of getOwnPropertyNames(HTMLElement.prototype)) {\n    if (name.slice(0, 2) === 'on') {\n      TYPE_MAP[HTML_NS]['*']['attributes'][name] = 'TrustedScript';\n    }\n  }\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createURL': TrustedURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypePolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          let result = method('' + s);\n          if (result === undefined || result === null) {\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    const policy = create(TrustedTypePolicy.prototype);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    defineProperty(policy, 'name', {\n      value: policyName,\n      writable: false,\n      configurable: false,\n      enumerable: true,\n    });\n\n    return /** @type {!TrustedTypePolicy} */ (freeze(policy));\n  }\n\n  /**\n   * Returns the name of the trusted type required for a given element\n   *   attribute.\n   * @param {string} tagName The name of the tag of the element.\n   * @param {string} attribute The name of the attribute.\n   * @param {string=} elementNs Element namespace.\n   * @param {string=} attributeNs The attribute namespace.\n   * @return {string|undefined} Required type name or undefined, if a Trusted\n   *   Type is not required.\n   */\n  function getAttributeType(tagName, attribute, elementNs = '',\n      attributeNs = '') {\n    const canonicalAttr = toLowerCase.apply(String(attribute));\n    return getTypeInternal_(tagName, 'attributes', canonicalAttr,\n        elementNs, attributeNs);\n  }\n\n  /**\n   * Returns a type name from a type map.\n   * @param {string} tag A tag name.\n   * @param {string} container 'attributes' or 'properties'\n   * @param {string} name The attribute / property name.\n   * @param {string=} elNs Element namespace.\n   * @param {string=} attrNs Attribute namespace.\n   * @return {string|undefined}\n   * @private\n   */\n  function getTypeInternal_(tag, container, name, elNs = '', attrNs = '') {\n    const canonicalTag = toUpperCase.apply(String(tag));\n\n    let ns = attrNs ? attrNs : elNs;\n    if (!ns) {\n      ns = HTML_NS;\n    }\n    const map = hasOwnProperty.apply(TYPE_MAP, [ns]) ? TYPE_MAP[ns] : null;\n    if (!map) {\n      return;\n    }\n    if (hasOwnProperty.apply(map, [canonicalTag]) &&\n        map[canonicalTag] &&\n        hasOwnProperty.apply(map[canonicalTag][container], [name]) &&\n        map[canonicalTag][container][name]) {\n      return map[canonicalTag][container][name];\n    }\n\n    if (hasOwnProperty.apply(map, ['*']) &&\n        hasOwnProperty.apply(map['*'][container], [name]) &&\n        map['*'][container][name]) {\n      return map['*'][container][name];\n    }\n  }\n\n  /**\n   * Returns the name of the trusted type required for a given element property.\n   * @param {string} tagName The name of the tag of the element.\n   * @param {string} property The property.\n   * @param {string=} elementNs Element namespace.\n   * @return {string|undefined} Required type name or undefined, if a Trusted\n   *   Type is not required.\n   */\n  function getPropertyType(tagName, property, elementNs = '') {\n    // TODO: Support namespaces.\n    return getTypeInternal_(tagName, 'properties', String(property), elementNs);\n  }\n\n  /**\n   * Returns the type map-like object, that resolves a name of a type for a\n   * given tag + attribute / property in a given namespace.\n   * The keys of the map are uppercase tag names. Map entry has mappings between\n   * a lowercase attribute name / case-sensitive property name and a name of the\n   * type that is required for that attribute / property.\n   * Example entry for 'IMG': {\"attributes\": {\"src\": \"TrustedHTML\"}}\n   * @param {string=} namespaceUri The namespace URI (will use the current\n   *   document namespace URI if omitted).\n   * @return {TrustedTypesTypeMap}\n   */\n  function getTypeMapping(namespaceUri = '') {\n    if (!namespaceUri) {\n      try {\n        namespaceUri = document.documentElement.namespaceURI;\n      } catch (e) {\n        namespaceUri = HTML_NS;\n      }\n    }\n    /**\n     * @template T\n     * @private\n     * @param {T} o\n     * @return {T}\n     */\n    function deepClone(o) {\n      return JSON.parse(JSON.stringify(o));\n    }\n    const map = TYPE_MAP[namespaceUri];\n    if (!map) {\n      return {};\n    }\n    return deepClone(map);\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @return {TrustedTypePolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   */\n  function createPolicy(name, policy) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('TrustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (pName === DEFAULT_POLICY_NAME) {\n      defaultPolicy = wrappedPolicy;\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  /**\n   * Returns the default policy, or null if it was not created.\n   * @return {TrustedTypePolicy}\n   */\n  function getDefaultPolicy() {\n    return defaultPolicy;\n  }\n\n  /**\n   * Resets the default policy.\n   */\n  function resetDefaultPolicy() {\n    defaultPolicy = null;\n    policyNames.splice(policyNames.indexOf(DEFAULT_POLICY_NAME), 1);\n  }\n\n  const api = create(TrustedTypePolicyFactory.prototype);\n  assign(api, {\n    // The main function to create policies.\n    createPolicy,\n\n    getPolicyNames,\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    getAttributeType,\n    getPropertyType,\n    getTypeMapping,\n\n    TrustedHTML: TrustedHTML,\n    TrustedURL: TrustedURL,\n    TrustedScriptURL: TrustedScriptURL,\n    TrustedScript: TrustedScript,\n  });\n\n  return {\n    TrustedTypes: freeze(api),\n    setAllowedPolicyNames,\n    getDefaultPolicy,\n    resetDefaultPolicy,\n  };\n};\n\n\nexport const {\n  TrustedTypes,\n  setAllowedPolicyNames,\n  getDefaultPolicy,\n  resetDefaultPolicy,\n} = trustedTypesBuilderTestOnly();\n\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst {\n  defineProperty,\n} = Object;\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n */\nexport function installSetter(object, name, setter) {\n  const descriptor = {\n    set: setter,\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs a setter and getter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n * @param {function(*): *|undefined} getter A getter function}\n */\nexport function installSetterAndGetter(object, name, setter, getter) {\n  const descriptor = {\n    set: setter,\n    get: getter,\n    configurable: true, // This can get uninstalled, we need configurable: true\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} fn A function}\n */\nexport function installFunction(object, name, fn) {\n  defineProperty(object, name, {\n    value: fn,\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\nimport {DIRECTIVE_NAME, TrustedTypeConfig} from './data/trustedtypeconfig.js';\nimport {\n  TrustedTypes,\n  setAllowedPolicyNames,\n  getDefaultPolicy,\n  resetDefaultPolicy,\n  HTML_NS,\n} from\n  './trustedtypes.js';\n\n/* eslint-enable no-unused-vars */\nimport {installFunction, installSetter, installSetterAndGetter}\n  from './utils/wrapper.js';\n\nconst {apply} = Reflect;\nconst {\n  getOwnPropertyNames,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n} = Object;\n\nconst {\n  hasOwnProperty,\n  isPrototypeOf,\n} = Object.prototype;\n\nconst {slice} = String.prototype;\n\n// No URL in IE 11.\nconst UrlConstructor = typeof window.URL == 'function' ?\n    URL.prototype.constructor :\n    null;\n\nconst stringifyForRangeHack = (function(doc) {\n  const r = doc.createRange();\n  // In IE 11 Range.createContextualFragment doesn't stringify its argument.\n  const f = r.createContextualFragment(/** @type {string} */ (\n    {toString: () => '<div></div>'}));\n  return f.childNodes.length == 0;\n})(document);\n\n/**\n * Return object constructor name\n * (their function.name is not available in IE 11).\n * @param {*} fn\n * @return {string}\n * @private\n */\nconst getConstructorName_ = document.createElement('div').constructor.name ?\n    (fn) => fn.name :\n    (fn) => ('' + fn).match(/^\\[object (\\S+)\\]$/)[1];\n\n// window.open on IE 11 is set on WindowPrototype\nconst windowOpenObject = getOwnPropertyDescriptor(window, 'open') ?\n  window :\n  window.constructor.prototype;\n\n// In IE 11, insertAdjacentHTML is on HTMLElement prototype\nconst insertAdjacentHTMLObject = apply(hasOwnProperty, Element.prototype,\n    ['insertAdjacentHTML']) ? Element.prototype : HTMLElement.prototype;\n\n// This is not available in release Firefox :(\n// https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1432523\nconst SecurityPolicyViolationEvent = window['SecurityPolicyViolationEvent'] ||\n  null;\n\n/**\n * Parses URL, catching all the errors.\n * @param  {string} url URL string to parse.\n * @return {URL|null}\n */\nfunction parseUrl_(url) {\n  try {\n    return new UrlConstructor(url, document.baseURI || undefined);\n  } catch (e) {\n    return null;\n  }\n}\n\n// We don't actually need other namespaces.\n// setAttribute is hooked on Element.prototype, which all elements inherit from,\n// and all sensitive property wrappers are hooked directly on Element as well.\nconst typeMap = TrustedTypes.getTypeMapping(HTML_NS);\n\nconst STRING_TO_TYPE = {\n  'TrustedHTML': TrustedTypes.TrustedHTML,\n  'TrustedScript': TrustedTypes.TrustedScript,\n  'TrustedScriptURL': TrustedTypes.TrustedScriptURL,\n  'TrustedURL': TrustedTypes.TrustedURL,\n};\n\n/**\n * Converts an uppercase tag name to an element constructor function name.\n * Used for property setter hijacking only.\n * @param {string} tagName\n * @return {string}\n */\nfunction convertTagToConstructor(tagName) {\n  if (tagName == '*') {\n    return 'HTMLElement';\n  }\n  return getConstructorName_(document.createElement(tagName).constructor);\n}\n\nfor (const tagName of Object.keys(typeMap)) {\n  const attrs = typeMap[tagName]['properties'];\n  for (const [k, v] of Object.entries(attrs)) {\n    attrs[k] = STRING_TO_TYPE[v];\n  }\n}\n\n/**\n * Map of type names to type checking function.\n * @type {!Object<string,!Function>}\n */\nconst TYPE_CHECKER_MAP = {\n  'TrustedHTML': TrustedTypes.isHTML,\n  'TrustedURL': TrustedTypes.isURL,\n  'TrustedScriptURL': TrustedTypes.isScriptURL,\n  'TrustedScript': TrustedTypes.isScript,\n};\n\n/**\n * Map of type names to type producing function.\n * @type {Object<string,string>}\n */\nconst TYPE_PRODUCER_MAP = {\n  'TrustedHTML': 'createHTML',\n  'TrustedURL': 'createURL',\n  'TrustedScriptURL': 'createScriptURL',\n  'TrustedScript': 'createScript',\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypePolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nconst TrustedTypePolicy = {};\n/* eslint-enable no-unused-vars */\n\n\n/**\n * An object for enabling trusted type enforcement.\n */\nexport class TrustedTypesEnforcer {\n  /**\n   * @param {!TrustedTypeConfig} config The configuration for\n   * trusted type enforcement.\n   */\n  constructor(config) {\n    /**\n     * A configuration for the trusted type enforcement.\n     * @private {!TrustedTypeConfig}\n     */\n    this.config_ = config;\n    /**\n     * @private {Object<string, function(*): *|undefined>}\n     */\n    this.originalSetters_ = {};\n  }\n\n  /**\n   * Wraps HTML sinks with an enforcement setter, which will enforce\n   * trusted types and do logging, if enabled.\n   *\n   */\n  install() {\n    setAllowedPolicyNames(this.config_.allowedPolicyNames);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    if ('ShadowRoot' in window) {\n      this.wrapSetter_(ShadowRoot.prototype, 'innerHTML',\n          TrustedTypes.TrustedHTML);\n    }\n    this.wrapWithEnforceFunction_(Range.prototype, 'createContextualFragment',\n        TrustedTypes.TrustedHTML, 0);\n\n    this.wrapWithEnforceFunction_(insertAdjacentHTMLObject,\n        'insertAdjacentHTML',\n        TrustedTypes.TrustedHTML, 1);\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      // Chrome\n      this.wrapWithEnforceFunction_(Document.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n      this.wrapWithEnforceFunction_(Document.prototype, 'open',\n          TrustedTypes.TrustedURL, 0);\n    } else {\n      // Firefox\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'open',\n          TrustedTypes.TrustedURL, 0);\n    }\n\n    this.wrapWithEnforceFunction_(windowOpenObject, 'open',\n        TrustedTypes.TrustedURL, 0);\n\n    if ('DOMParser' in window) {\n      this.wrapWithEnforceFunction_(DOMParser.prototype, 'parseFromString',\n          TrustedTypes.TrustedHTML, 0);\n    }\n    this.wrapWithEnforceFunction_(window, 'setInterval',\n        TrustedTypes.TrustedScript, 0);\n    this.wrapWithEnforceFunction_(window, 'setTimeout',\n        TrustedTypes.TrustedScript, 0);\n    this.wrapSetAttribute_();\n    this.installPropertySetWrappers_();\n  }\n\n  /**\n   * Removes the original setters.\n   */\n  uninstall() {\n    setAllowedPolicyNames(['*']);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    if ('ShadowRoot' in window) {\n      this.restoreSetter_(ShadowRoot.prototype, 'innerHTML');\n    }\n    this.restoreFunction_(Range.prototype, 'createContextualFragment');\n    this.restoreFunction_(insertAdjacentHTMLObject, 'insertAdjacentHTML');\n    this.restoreFunction_(Element.prototype, 'setAttribute');\n    this.restoreFunction_(Element.prototype, 'setAttributeNS');\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      this.restoreFunction_(Document.prototype, 'write');\n      this.restoreFunction_(Document.prototype, 'open');\n    } else {\n      this.restoreFunction_(HTMLDocument.prototype, 'write');\n      this.restoreFunction_(HTMLDocument.prototype, 'open');\n    }\n    this.restoreFunction_(windowOpenObject, 'open');\n\n    if ('DOMParser' in window) {\n      this.restoreFunction_(DOMParser.prototype, 'parseFromString');\n    }\n    this.restoreFunction_(window, 'setTimeout');\n    this.restoreFunction_(window, 'setInterval');\n    this.uninstallPropertySetWrappers_();\n    resetDefaultPolicy();\n  }\n\n  /**\n   * Installs wrappers for directly setting properties\n   * based on the type map.\n   * @private\n   */\n  installPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (const tag of getOwnPropertyNames(typeMap)) {\n      for (const property of getOwnPropertyNames(typeMap[tag]['properties'])) {\n        this.wrapSetter_(\n            window[convertTagToConstructor(tag)].prototype,\n            property,\n            typeMap[tag]['properties'][property]);\n      }\n    }\n  }\n\n  /**\n   * Uninstalls wrappers for directly setting properties\n   * based on the type map.\n   * @private\n   */\n  uninstallPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (const tag of getOwnPropertyNames(typeMap)) {\n      for (const property of getOwnPropertyNames(typeMap[tag]['properties'])) {\n        this.restoreSetter_(\n            window[convertTagToConstructor(tag)].prototype,\n            property);\n      }\n    }\n  }\n\n  /** Wraps set attribute with an enforcement function. */\n  wrapSetAttribute_() {\n    const that = this;\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttribute',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttributeNS',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeNSWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttribute.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttribute function.\n   * @return {*}\n   */\n  setAttributeWrapper_(context, originalFn, ...args) {\n    // Note(slekies): In a normal application constructor should never be null.\n    // However, there are no guarantees. If the constructor is null, we cannot\n    // determine whether a special type is required. In order to not break the\n    // application, we will not do any further type checks and pass the call\n    // to setAttribute.\n    if (context.constructor !== null && context instanceof Element) {\n      const attrName = (args[0] = String(args[0])).toLowerCase();\n      const requiredType = TrustedTypes.getAttributeType(context.tagName,\n          attrName, context.namespaceURI);\n      if (requiredType && apply(hasOwnProperty, STRING_TO_TYPE,\n          [requiredType])) {\n        return this.enforce_(\n            context, 'setAttribute', STRING_TO_TYPE[requiredType],\n            originalFn, 1, args);\n      }\n    }\n    return originalFn.apply(context, args);\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttributeNS.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttributeNS function.\n   * @return {*}\n   */\n  setAttributeNSWrapper_(context, originalFn, ...args) {\n    // See the note from setAttributeWrapper_ above.\n    if (context.constructor !== null && context instanceof Element) {\n      const ns = args[0] ? String(args[0]) : null;\n      args[0] = ns;\n      const attrName = (args[1] = String(args[1])).toLowerCase();\n      const requiredType = TrustedTypes.getAttributeType(context.tagName,\n          attrName, context.namespaceURI, ns);\n      if (requiredType && apply(hasOwnProperty, STRING_TO_TYPE,\n          [requiredType])) {\n        return this.enforce_(context, 'setAttributeNS',\n            STRING_TO_TYPE[requiredType],\n            originalFn, 2, args);\n      }\n    }\n    return originalFn.apply(context, args);\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {number} argNumber Number of the argument to enforce the type of.\n   * @private\n   */\n  wrapWithEnforceFunction_(object, name, type, argNumber) {\n    const that = this;\n    this.wrapFunction_(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.enforce_.call(that, this, name, type, originalFn,\n              argNumber, args);\n        });\n  }\n\n\n  /**\n   * Wraps an existing function with a given function body and stores the\n   * original function.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {function(!Function, ...*)} functionBody The wrapper function.\n   */\n  wrapFunction_(object, name, functionBody) {\n    const descriptor = getOwnPropertyDescriptor(object, name);\n    const originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      throw new TypeError(\n          'Property ' + name + ' on object' + object + ' is not a function');\n    }\n\n    const key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error(\n          `TrustedTypesEnforcer: Double installation detected: ${key} ${name}`);\n    }\n    installFunction(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @return {*}\n         */\n        function(...args) {\n          return functionBody.bind(this, originalFn).apply(this, args);\n        });\n    this.originalSetters_[key] = originalFn;\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {!Object=} descriptorObject If present, will reuse the\n   *   setter/getter from this one, instead of object. Used for redefining\n   *   setters in subclasses.\n   * @private\n   */\n  wrapSetter_(object, name, type, descriptorObject = undefined) {\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n\n    let useObject = descriptorObject || object;\n    let descriptor;\n    let originalSetter;\n    const stopAt = getPrototypeOf(Node.prototype);\n\n    // Find the descriptor on the object or its prototypes, stopping at Node.\n    do {\n      descriptor = getOwnPropertyDescriptor(useObject, name);\n      originalSetter = /** @type {function(*):*} */ (descriptor ?\n          descriptor.set : null);\n      if (!originalSetter) {\n        useObject = getPrototypeOf(useObject) || stopAt;\n      }\n    } while (!(originalSetter || useObject === stopAt || !useObject));\n\n    if (!(originalSetter instanceof Function)) {\n      throw new TypeError(\n          'No setter for property ' + name + ' on object' + object);\n    }\n\n    const key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error(\n          `TrustedTypesEnforcer: Double installation detected: ${key} ${name}`);\n    }\n    const that = this;\n    /**\n     * @this {TrustedTypesEnforcer}\n     * @param {*} value\n     */\n    const enforcingSetter = function(value) {\n      that.enforce_.call(that, this, name, type, originalSetter, 0,\n          [value]);\n    };\n\n    if (useObject === object) {\n      installSetter(\n          object,\n          name,\n          enforcingSetter);\n    } else {\n      // Since we're creating a new setter in subclass, we also need to\n      // overwrite the getter.\n      installSetterAndGetter(\n          object,\n          name,\n          enforcingSetter,\n          descriptor.get\n      );\n    }\n    this.originalSetters_[key] = originalSetter;\n  }\n\n  /**\n   * Restores the original setter for the property, as encountered during\n   * install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Object=} descriptorObject If present, will restore the original\n   *   setter/getter from this one, instead of object.\n   * @private\n   */\n  restoreSetter_(object, name, descriptorObject = undefined) {\n    const key = this.getKey_(object, name);\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          // eslint-disable-next-line max-len\n          `TrustedTypesEnforcer: Cannot restore (double uninstallation?): ${key} ${name}`);\n    }\n    if (descriptorObject) {\n      // We have to also overwrite a getter.\n      installSetterAndGetter(object, name, this.originalSetters_[key],\n          getOwnPropertyDescriptor(descriptorObject, name).get);\n    } else {\n      installSetter(object, name, this.originalSetters_[key]);\n    }\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Restores the original method of an object, as encountered during install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreFunction_(object, name) {\n    const key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          // eslint-disable-next-line max-len\n          `TrustedTypesEnforcer: Cannot restore (double uninstallation?): ${key} ${name}`);\n    }\n    installFunction(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Returns the key name for caching original setters.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @return {string} Key name.\n   * @private\n   */\n  getKey_(object, name) {\n    // TODO(msamuel): Can we use Object.prototype.toString.call(object)\n    // to get an unspoofable string here?\n    // TODO(msamuel): fail on '-' in object.constructor.name?\n    // No Function.name in IE 11\n    const ctrName = '' + (\n      object.constructor.name ?\n      object.constructor.name :\n      object.constructor);\n    return ctrName + '-' + name;\n  }\n\n  /**\n   * Logs and enforces TrustedTypes depending on the given configuration.\n   * @template T\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {function(?):T} originalSetter Original setter.\n   * @param {number} argNumber Number of argument to enforce the type of.\n   * @param {Array} args Arguments.\n   * @return {T}\n   * @private\n   */\n  enforce_(context, propertyName, typeToEnforce, originalSetter, argNumber,\n      args) {\n    const value = args[argNumber];\n    const typeName = '' + typeToEnforce.name;\n    // If typed value is given, pass through.\n    if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n        TYPE_CHECKER_MAP[typeName](value)) {\n      if (stringifyForRangeHack &&\n            propertyName == 'createContextualFragment') {\n        // IE 11 hack, somehow the value is not stringified implicitly.\n        args[argNumber] = args[argNumber].toString();\n      }\n      return apply(originalSetter, context, args);\n    }\n\n    if (typeToEnforce === TrustedTypes.TrustedScript) {\n      const isInlineEventHandler =\n          propertyName == 'setAttribute' ||\n          propertyName === 'setAttributeNS' ||\n          apply(slice, propertyName, [0, 2]) === 'on';\n      // If a function (instead of string) is passed to inline event attribute,\n      // or set(Timeout|Interval), pass through.\n      const propertyAcceptsFunctions =\n          propertyName === 'setInterval' ||\n          propertyName === 'setTimeout' ||\n          isInlineEventHandler;\n      if ((propertyAcceptsFunctions && typeof value === 'function') ||\n          (isInlineEventHandler && value === null)) {\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    // Apply a fallback policy, if it exists.\n    const fallbackPolicy = getDefaultPolicy.call(TrustedTypes);\n    if (fallbackPolicy && TYPE_CHECKER_MAP.hasOwnProperty(typeName)) {\n      let fallbackValue;\n      let exceptionThrown;\n      try {\n        fallbackValue = fallbackPolicy[TYPE_PRODUCER_MAP[typeName]](value);\n      } catch (e) {\n        exceptionThrown = true;\n      }\n      if (!exceptionThrown) {\n        args[argNumber] = fallbackValue;\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    const contextName = getConstructorName_(context.constructor) ||\n        '' + context;\n    const message = `Failed to set ${propertyName} on ${contextName}: `\n        + `This property requires ${typeName}.`;\n\n    if (this.config_.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      console.warn(message, propertyName, context, typeToEnforce, value);\n    }\n\n    // Unconditionally dispatch an event.\n    if (typeof SecurityPolicyViolationEvent == 'function') {\n      let blockedURI = '';\n      if (typeToEnforce === TrustedTypes.TrustedURL ||\n          typeToEnforce === TrustedTypes.TrustedScriptURL) {\n        blockedURI = parseUrl_(value) || '';\n        if (blockedURI) {\n          blockedURI = blockedURI.href;\n        }\n      }\n      const valueSlice = apply(slice, '' + value, [0, 40]);\n      const event = new SecurityPolicyViolationEvent(\n          'securitypolicyviolation',\n          {\n            'bubbles': true,\n            'blockedURI': blockedURI,\n            'disposition': this.config_.isEnforcementEnabled ?\n              'enforce' : 'report',\n            'documentURI': document.location.href,\n            'effectiveDirective': DIRECTIVE_NAME,\n            'originalPolicy': this.config_.cspString,\n            'statusCode': 0,\n            'violatedDirective': DIRECTIVE_NAME,\n            'sample': `${contextName}.${propertyName} ${valueSlice}`,\n          });\n      if (context instanceof Node && context.isConnected) {\n        context.dispatchEvent(event);\n      } else { // Fallback - dispatch an event on base document.\n        document.dispatchEvent(event);\n      }\n    }\n\n    if (this.config_.isEnforcementEnabled) {\n      throw new TypeError(message);\n    } else { // pass-through\n      return apply(originalSetter, context, args);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes, TrustedTypePolicy, TrustedTypePolicyFactory} from\n  '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n/**\n * Sets up the public Trusted Types API in the global object.\n */\nfunction setupPolyfill() {\n  // Make sure Closure compiler exposes the names.\n  if (typeof window === 'undefined' ||\n      typeof window['TrustedTypes'] !== 'undefined') {\n    return;\n  }\n\n  const publicApi = Object.create(TrustedTypePolicyFactory.prototype);\n  Object.assign(publicApi, {\n    'isHTML': tt.isHTML,\n    'isURL': tt.isURL,\n    'isScriptURL': tt.isScriptURL,\n    'isScript': tt.isScript,\n    'createPolicy': tt.createPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n    'getAttributeType': tt.getAttributeType,\n    'getPropertyType': tt.getPropertyType,\n    'getTypeMapping': tt.getTypeMapping,\n    '_isPolyfill_': true,\n  });\n  window['TrustedTypes'] = Object.freeze(publicApi);\n\n  window['TrustedHTML'] = tt.TrustedHTML;\n  window['TrustedURL'] = tt.TrustedURL;\n  window['TrustedScriptURL'] = tt.TrustedScriptURL;\n  window['TrustedScript'] = tt.TrustedScript;\n  window['TrustedTypePolicy'] = TrustedTypePolicy;\n  window['TrustedTypePolicyFactory'] = TrustedTypePolicyFactory;\n}\n\nsetupPolyfill();\n\nexport default tt;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that enforces the types.\n */\nimport {TrustedTypesEnforcer} from '../enforcer.js';\nimport {TrustedTypeConfig} from '../data/trustedtypeconfig.js';\n/* eslint-disable no-unused-vars */\nimport TrustedTypes from './api_only.js';\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Tries to guess a CSP policy from:\n *  - the current polyfill script element text content (if prefixed with\n *    \"Content-Security-Policy:\")\n *  - the data-csp attribute value of the current script element.\n *  - meta header\n * @return {?string} Guessed CSP value, or null.\n */\nfunction detectPolicy() {\n  try {\n    const currentScript = document.currentScript || (function() {\n      const scripts = document.getElementsByTagName('script');\n      return scripts[scripts.length - 1];\n    })();\n\n    const bodyPrefix = 'Content-Security-Policy:';\n    if (currentScript &&\n            currentScript.textContent.trim().substr(0, bodyPrefix.length) ==\n                bodyPrefix) {\n      return currentScript.textContent.trim().slice(bodyPrefix.length);\n    }\n    if (currentScript.dataset['csp']) {\n      return currentScript.dataset['csp'];\n    }\n    const cspInMeta = document.head.querySelector(\n        'meta[http-equiv^=\"Content-Security-Policy\"]');\n    if (cspInMeta) {\n      return cspInMeta['content'].trim();\n    }\n  } catch (e) {\n    return null;\n  }\n  return null;\n}\n\n/**\n * Bootstraps all trusted types polyfill and their enforcement.\n */\nexport function bootstrap() {\n  const csp = detectPolicy();\n  const config = csp ? TrustedTypeConfig.fromCSP(csp) : new TrustedTypeConfig(\n      /* isLoggingEnabled */ false,\n      /* isEnforcementEnabled */ false,\n      /* allowedPolicyNames */ ['*']);\n\n  const trustedTypesEnforcer = new TrustedTypesEnforcer(config);\n\n  trustedTypesEnforcer.install();\n}\n\n/**\n * Determines if the enforcement should be enabled.\n * @return {boolean}\n */\nfunction shouldBootstrap() {\n  const rootProperty = 'TrustedTypes';\n  if (window[rootProperty] && !window[rootProperty]['_isPolyfill_']) {\n    // Native implementation exists\n    return false;\n  }\n  return true;\n}\n\n// Bootstrap only if native implementation is missing.\nif (shouldBootstrap()) {\n  bootstrap();\n}\n"]}