{"version":3,"sources":["src/data/trustedtypeconfig.js","src/trustedtypes.js","src/utils/wrapper.js","src/enforcer.js","src/polyfill/api_only.js","src/polyfill/full.js"],"names":["parseCSP","cspString","WHITESPACE","trim","split","SEMICOLON","map","serializedDirective","reduce","parsed","directive","slice","s","sort","fromCSP","policy","TrustedTypeConfig$$module$src$data$trustedtypeconfig.parseCSP","enforce","DIRECTIVE_NAME","policies","filter","p","charAt","TrustedTypeConfig","isLoggingEnabled","fallbackPolicyName","isEnforcementEnabled","allowedPolicyNames","rejectInputFn","TypeError","TrustedTypePolicy","TrustedTypePolicyFactory","TrustedTypes","setAllowedPolicyNames","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","prototype","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","result","allowedValue","o","factory","createTypeMapping","writable","configurable","enumerable","assign","Object","forEach","push","Array","Symbol","WeakMap","policyNames","exposedPolicies","Map","allowedNames","enforceNameWhitelist","TrustedType","TrustedURL","TrustedScriptURL","TrustedHTML","TrustedScript","createFunctionAllowed","hasOwnProperty","api","createPolicy","expose","DOMException","window","message","indexOf","call","console","warn","wrappedPolicy","getExposedPolicy","getPolicyNames","isHTML","isURL","isScriptURL","isScript","length","el","installFunction","object","fn","apply","Reflect","getOwnPropertyDescriptor","isPrototypeOf","String","UrlConstructor","URL","constructor","stringifyForRangeHack","doc","createRange","r","createContextualFragment","f","toString","childNodes","document","getConstructorName_","createElement","match","windowOpenObject","innerHTMLObject","Element","HTMLElement","insertAdjacentHTMLObject","SecurityPolicyViolationEvent","SET_ATTRIBUTE_TYPE_MAP","HTMLIFrameElement","TYPE_CHECKER_MAP","TYPE_PRODUCER_MAP","ATTR_PROPERTY_MAP","wrapSetter_","descriptorObject","enforcingSetter","that","enforce_","originalSetter","useObject","descriptor","Function","originalSetters_","wrapWithEnforceFunction_","argNumber","wrapFunction_","originalFn","args","wrapSetAttribute_","setAttributeWrapper_","bind","setAttributeNSWrapper_","functionBody","TrustedTypesEnforcer","config","config_","context","attrName","toLowerCase","ctor","propertyName","typeToEnforce","typeName","isInlineEventHandler","fallback","fallbackPolicy","exceptionThrown","fallbackValue","e","contextName","blockedURI","baseURI","href","valueSlice","event","location","isConnected","dispatchEvent","publicApi","tt","detectPolicy","currentScript","scripts","getElementsByTagName","bodyPrefix","textContent","substr","dataset","cspInMeta","head","querySelector","csp","TrustedTypeConfig$$module$src$data$trustedtypeconfig.fromCSP","trustedTypesEnforcer","ShadowRoot","Range","Document","HTMLDocument","DOMParser","installScriptWrappers_","HTMLScriptElement","Node","installPropertySetWrappers_","attribute","property"],"mappings":"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","file":"trustedtypes.build.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * CSP Directive name controlling Trusted Types behavior.\n * @type {string}\n */\nexport const DIRECTIVE_NAME = 'trusted-types';\n\n/**\n * A configuration object for trusted type enforcement.\n */\nexport class TrustedTypeConfig {\n  /**\n   * @param {boolean} isLoggingEnabled If true enforcement wrappers will log\n   *   violations to the console.\n   * @param {boolean} isEnforcementEnabled If true enforcement is enabled at\n   *   runtime.\n   * @param {?string} fallbackPolicyName If present, direct DOM sink usage\n   *   will be passed through this policy (has to be exposed).\n   * @param {Array<string>} allowedPolicyNames Whitelisted policy names.\n   * @param {?string} cspString String with the CSP policy.\n   */\n  constructor(isLoggingEnabled,\n      isEnforcementEnabled,\n      fallbackPolicyName,\n      allowedPolicyNames,\n      cspString = null) {\n    /**\n      * True if logging is enabled.\n      * @type {boolean}\n      */\n    this.isLoggingEnabled = isLoggingEnabled;\n\n    /**\n      * True if enforcement is enabled.\n      * @type {boolean}\n      */\n    this.isEnforcementEnabled = isEnforcementEnabled;\n\n    /**\n     * Fallback policy name\n     * @type {?string}\n     */\n    this.fallbackPolicyName = fallbackPolicyName;\n\n    /**\n     * Allowed policy names.\n     * @type {Array<string>}\n     */\n    this.allowedPolicyNames = allowedPolicyNames;\n\n    /**\n     * CSP string that defined the policy.\n     * @type {?string}\n     */\n    this.cspString = cspString;\n  }\n\n  /**\n   * Parses a CSP policy.\n   * @link https://www.w3.org/TR/CSP3/#parse-serialized-policy\n   * @param  {string} cspString String with a CSP definition.\n   * @return {Object<string,Array<string>>} Parsed CSP, keyed by directive\n   *   names.\n   */\n  static parseCSP(cspString) {\n    const SEMICOLON = /\\s*;\\s*/;\n    const WHITESPACE = /\\s+/;\n    return cspString.trim().split(SEMICOLON)\n        .map((serializedDirective) => serializedDirective.split(WHITESPACE))\n        .reduce(function(parsed, directive) {\n          if (directive[0]) {\n            parsed[directive[0]] = directive.slice(1).map((s) => s).sort();\n          }\n          return parsed;\n        }, {});\n  }\n\n  /**\n   * Creates a TrustedTypeConfig object from a CSP string.\n   * @param  {string} cspString\n   * @return {!TrustedTypeConfig}\n   */\n  static fromCSP(cspString) {\n    const isLoggingEnabled = true;\n    const policy = TrustedTypeConfig.parseCSP(cspString);\n    const enforce = DIRECTIVE_NAME in policy;\n    let policies = ['*'];\n    let fallbackPolicyName = 'default';\n    if (enforce) {\n      policies = policy[DIRECTIVE_NAME].filter((p) => p.charAt(0) !== '\\'');\n    }\n\n    return new TrustedTypeConfig(\n      isLoggingEnabled,\n      enforce, /* isEnforcementEnabled */\n      fallbackPolicyName, /* fallbackPolicyName */\n      policies, /* allowedPolicyNames */\n      cspString\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst rejectInputFn = (s) => {\n  throw new TypeError('undefined conversion');\n};\n\n/**\n * @constructor\n * @property {!function(string):TrustedHTML} createHTML\n * @property {!function(string):TrustedURL} createURL\n * @property {!function(string):TrustedScriptURL} createScriptURL\n * @property {!function(string):TrustedScript} createScript\n * @property {!string} name\n */\nexport const TrustedTypePolicy = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/**\n * @constructor\n */\nexport const TrustedTypePolicyFactory = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nlet TrustedTypesInnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,!TrustedTypePolicy>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createURL': TrustedURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypePolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          let result = method('' + s);\n          if (result === undefined || result === null) {\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    let policy = create(TrustedTypePolicy.prototype);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    defineProperty(policy, 'name', {\n        value: policyName,\n        writable: false,\n        configurable: false,\n        enumerable: true,\n    });\n\n    return /** @type {!TrustedTypePolicy} */ (freeze(policy));\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?TrustedTypePolicy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @param  {boolean=} expose Iff true, the policy will be exposed (available\n   *   globally).\n   * @return {TrustedTypePolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   */\n  function createPolicy(name, policy, expose = false) {\n    const pName = '' + name; // Assert it's a string\n\n    if (pName == 'default' && !expose) {\n      const message = 'The default policy must be exposed';\n       if (DOMException) {\n        // Workaround for missing externs in Closure compiler.\n        throw new window['DOMException'](message, 'InvalidStateError');\n      } else {\n        throw new TypeError(message);\n      }\n    }\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('TrustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (expose) {\n      exposedPolicies.set(pName, wrappedPolicy);\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n\n  const api = create(TrustedTypePolicyFactory.prototype);\n  assign(api, {\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    TrustedHTML: TrustedHTML,\n    TrustedURL: TrustedURL,\n    TrustedScriptURL: TrustedScriptURL,\n    TrustedScript: TrustedScript,\n  });\n\n  return {\n    TrustedTypes: freeze(api),\n    setAllowedPolicyNames,\n  };\n};\n\n\nexport const {\n  TrustedTypes,\n  setAllowedPolicyNames,\n} = trustedTypesBuilderTestOnly();\n\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst {\n  defineProperty,\n} = Object;\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n */\nexport function installSetter(object, name, setter) {\n  const descriptor = {\n    set: setter,\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs a setter and getter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} setter A setter function}\n * @param {function(*): *|undefined} getter A getter function}\n */\nexport function installSetterAndGetter(object, name, setter, getter) {\n  const descriptor = {\n    set: setter,\n    get: getter,\n    configurable: true, // This can get uninstalled, we need configurable: true\n  };\n  defineProperty(object, name, descriptor);\n}\n\n/**\n * Installs the setter of a given property.\n * @param {!Object} object An object for which to wrap the property.\n * @param {string} name The name of the property to wrap.\n * @param {function(*): *|undefined} fn A function}\n */\nexport function installFunction(object, name, fn) {\n  defineProperty(object, name, {\n    value: fn,\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/* eslint-disable no-unused-vars */\nimport {DIRECTIVE_NAME, TrustedTypeConfig} from './data/trustedtypeconfig.js';\nimport {TrustedTypes, setAllowedPolicyNames} from './trustedtypes.js';\n\n/* eslint-enable no-unused-vars */\nimport {installFunction, installSetter, installSetterAndGetter}\n  from './utils/wrapper.js';\n\nconst {apply} = Reflect;\nconst {\n  getOwnPropertyNames,\n  getOwnPropertyDescriptor,\n  hasOwnProperty,\n  getPrototypeOf,\n  isPrototypeOf,\n} = Object;\n\nconst {slice} = String.prototype;\n\n// No URL in IE 11.\nconst UrlConstructor = typeof window.URL == 'function' ?\n    URL.prototype.constructor :\n    null;\n\nconst stringifyForRangeHack = (function(doc) {\n  const r = doc.createRange();\n  // In IE 11 Range.createContextualFragment doesn't stringify its argument.\n  const f = r.createContextualFragment(/** @type {string} */ (\n      {toString: () => '<div></div>'}));\n  return f.childNodes.length == 0;\n})(document);\n\n/**\n * Return object constructor name\n * (their function.name is not available in IE 11).\n * @param {*} fn\n * @return {string}\n * @private\n */\nconst getConstructorName_ = document.createElement('div').constructor.name ?\n    (fn) => fn.name :\n    (fn) => ('' + fn).match(/^\\[object (\\S+)\\]$/)[1];\n\n// window.open on IE 11 is set on WindowPrototype\nconst windowOpenObject = getOwnPropertyDescriptor(window, 'open') ?\n  window :\n  window.constructor.prototype;\n\n// IE has innerHTML on HTMLElement.\nconst innerHTMLObject =\n    apply(hasOwnProperty, Element.prototype, ['innerHTML']) ?\n    Element.prototype :\n    HTMLElement.prototype;\n\n// In IE 11, insertAdjacentHTML is on HTMLElement prototype\nconst insertAdjacentHTMLObject = apply(hasOwnProperty, Element.prototype,\n  ['insertAdjacentHTML']) ? Element.prototype : HTMLElement.prototype;\n\n// This is not available in release Firefox :(\n// https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent\n// https://bugzilla.mozilla.org/show_bug.cgi?id=1432523\nconst SecurityPolicyViolationEvent = window['SecurityPolicyViolationEvent'] ||\n  null;\n\n/**\n * Parses URL, catching all the errors.\n * @param  {string} url URL string to parse.\n * @return {URL|null}\n */\nfunction parseUrl_(url) {\n  try {\n    return new UrlConstructor(url, document.baseURI || undefined);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * A map of attribute names to allowed types.\n * @type {!Object<string, !Object<string, !Function>>}\n */\nlet SET_ATTRIBUTE_TYPE_MAP = {\n  // TODO(slekies): Add SVG Elements here\n  // TODO(koto): Figure out what to to with <link>\n  'HTMLAnchorElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLAreaElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLBaseElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLButtonElement': {\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLSourceElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLImageElement': {\n    'src': TrustedTypes.TrustedURL,\n    // TODO(slekies): add special handling for srcset\n  },\n  'HTMLTrackElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLMediaElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLInputElement': {\n    'src': TrustedTypes.TrustedURL,\n    'formaction': TrustedTypes.TrustedURL,\n  },\n  'HTMLFormElement': {\n    'action': TrustedTypes.TrustedURL,\n  },\n  'HTMLFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n  },\n  'HTMLIFrameElement': {\n    'src': TrustedTypes.TrustedURL,\n    'srcdoc': TrustedTypes.TrustedHTML,\n  },\n  'HTMLLinkElement': {\n    'href': TrustedTypes.TrustedURL,\n  },\n  'HTMLObjectElement': {\n    'data': TrustedTypes.TrustedScriptURL,\n    'codebase': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLEmbedElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n  },\n  'HTMLScriptElement': {\n    'src': TrustedTypes.TrustedScriptURL,\n    'text': TrustedTypes.TrustedScript,\n  },\n  'HTMLElement': {\n  },\n};\n\n// Edge doesn't support srcdoc.\nif (!('srcdoc' in HTMLIFrameElement.prototype)) {\n  delete SET_ATTRIBUTE_TYPE_MAP['HTMLIFrameElement']['srcdoc'];\n}\n\n// Add inline event handlers property names.\nfor (let name of getOwnPropertyNames(HTMLElement.prototype)) {\n  if (name.slice(0, 2) === 'on') {\n    SET_ATTRIBUTE_TYPE_MAP['HTMLElement'][name] = TrustedTypes.TrustedScript;\n  }\n}\n\n/**\n * Map of type names to type checking function.\n * @type {!Object<string,!Function>}\n */\nconst TYPE_CHECKER_MAP = {\n  'TrustedHTML': TrustedTypes.isHTML,\n  'TrustedURL': TrustedTypes.isURL,\n  'TrustedScriptURL': TrustedTypes.isScriptURL,\n  'TrustedScript': TrustedTypes.isScript,\n};\n\n/**\n * Map of type names to type producing function.\n * @type {Object<string,string>}\n */\nconst TYPE_PRODUCER_MAP = {\n  'TrustedHTML': 'createHTML',\n  'TrustedURL': 'createURL',\n  'TrustedScriptURL': 'createScriptURL',\n  'TrustedScript': 'createScript',\n};\n\n/**\n * @type {function(string):?TrustedTypePolicy}\n */\nconst getExposedPolicy = TrustedTypes.getExposedPolicy;\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypePolicy}\n * @property {function(string):TrustedHTML} createHTML\n * @property {function(string):TrustedURL} createURL\n * @property {function(string):TrustedScriptURL} createScriptURL\n * @property {function(string):TrustedScript} createScript\n */\nlet TrustedTypePolicy = {};\n/* eslint-enable no-unused-vars */\n\n/**\n * A map of HTML attribute to element property names.\n * @type {!Object<string, string>}\n */\nconst ATTR_PROPERTY_MAP = {\n  'codebase': 'codeBase',\n  'formaction': 'formAction',\n};\n\n/**\n * An object for enabling trusted type enforcement.\n */\nexport class TrustedTypesEnforcer {\n  /**\n   * @param {!TrustedTypeConfig} config The configuration for\n   * trusted type enforcement.\n   */\n  constructor(config) {\n    /**\n     * A configuration for the trusted type enforcement.\n     * @private {!TrustedTypeConfig}\n     */\n    this.config_ = config;\n    /**\n     * @private {Object<string, function(*): *|undefined>}\n     */\n    this.originalSetters_ = {};\n  }\n\n  /**\n   * Wraps HTML sinks with an enforcement setter, which will enforce\n   * trusted types and do logging, if enabled.\n   *\n   */\n  install() {\n    setAllowedPolicyNames(this.config_.allowedPolicyNames);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    this.wrapSetter_(innerHTMLObject, 'innerHTML', TrustedTypes.TrustedHTML);\n    this.wrapSetter_(innerHTMLObject, 'outerHTML', TrustedTypes.TrustedHTML);\n    if ('ShadowRoot' in window) {\n      this.wrapSetter_(ShadowRoot.prototype, 'innerHTML',\n         TrustedTypes.TrustedHTML);\n    }\n    this.wrapWithEnforceFunction_(Range.prototype, 'createContextualFragment',\n        TrustedTypes.TrustedHTML, 0);\n\n    this.wrapWithEnforceFunction_(insertAdjacentHTMLObject,\n        'insertAdjacentHTML',\n        TrustedTypes.TrustedHTML, 1);\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      // Chrome\n      this.wrapWithEnforceFunction_(Document.prototype, 'write',\n          TrustedTypes.TrustedHTML, 0);\n      this.wrapWithEnforceFunction_(Document.prototype, 'open',\n          TrustedTypes.TrustedURL, 0);\n    } else {\n      // Firefox\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'write',\n        TrustedTypes.TrustedHTML, 0);\n      this.wrapWithEnforceFunction_(HTMLDocument.prototype, 'open',\n          TrustedTypes.TrustedURL, 0);\n    }\n\n    this.wrapWithEnforceFunction_(windowOpenObject, 'open',\n        TrustedTypes.TrustedURL, 0);\n\n    if ('DOMParser' in window) {\n      this.wrapWithEnforceFunction_(DOMParser.prototype, 'parseFromString',\n          TrustedTypes.TrustedHTML, 0);\n    }\n    this.wrapWithEnforceFunction_(window, 'setInterval',\n        TrustedTypes.TrustedScript, 0);\n    this.wrapWithEnforceFunction_(window, 'setTimeout',\n        TrustedTypes.TrustedScript, 0);\n    this.wrapSetAttribute_();\n    this.installScriptWrappers_();\n    this.installPropertySetWrappers_();\n  }\n\n  /**\n   * Removes the original setters.\n   */\n  uninstall() {\n    setAllowedPolicyNames(['*']);\n\n    if (!this.config_.isEnforcementEnabled && !this.config_.isLoggingEnabled) {\n      return;\n    }\n\n    this.restoreSetter_(innerHTMLObject, 'innerHTML');\n    this.restoreSetter_(innerHTMLObject, 'outerHTML');\n    if ('ShadowRoot' in window) {\n      this.restoreSetter_(ShadowRoot.prototype, 'innerHTML');\n    }\n    this.restoreFunction_(Range.prototype, 'createContextualFragment');\n    this.restoreFunction_(insertAdjacentHTMLObject, 'insertAdjacentHTML');\n    this.restoreFunction_(Element.prototype, 'setAttribute');\n    this.restoreFunction_(Element.prototype, 'setAttributeNS');\n\n    if (getOwnPropertyDescriptor(Document.prototype, 'write')) {\n      this.restoreFunction_(Document.prototype, 'write');\n      this.restoreFunction_(Document.prototype, 'open');\n    } else {\n      this.restoreFunction_(HTMLDocument.prototype, 'write');\n      this.restoreFunction_(HTMLDocument.prototype, 'open');\n    }\n    this.restoreFunction_(windowOpenObject, 'open');\n\n    if ('DOMParser' in window) {\n      this.restoreFunction_(DOMParser.prototype, 'parseFromString');\n    }\n    this.restoreFunction_(window, 'setTimeout');\n    this.restoreFunction_(window, 'setInterval');\n    this.uninstallPropertySetWrappers_();\n    this.uninstallScriptWrappers_();\n  }\n\n  /**\n   * Installs wrappers for setting properties of script elements.\n   */\n  installScriptWrappers_() {\n    // HTMLScript element has no own setters for crucial properties, we have to\n    // reuse ones from HTMLElement.\n    this.wrapSetter_(HTMLScriptElement.prototype, 'innerText',\n        TrustedTypes.TrustedScript, HTMLElement.prototype);\n    this.wrapSetter_(HTMLScriptElement.prototype, 'textContent',\n        TrustedTypes.TrustedScript, Node.prototype);\n  }\n\n  /**\n   * Uninstalls wrappers for setting properties of script elements.\n   */\n  uninstallScriptWrappers_() {\n    this.restoreSetter_(HTMLScriptElement.prototype, 'innerText',\n        HTMLElement.prototype);\n    this.restoreSetter_(HTMLScriptElement.prototype, 'textContent',\n        Node.prototype);\n  }\n\n  /**\n   * Installs wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  installPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = apply(hasOwnProperty, ATTR_PROPERTY_MAP, [attribute]) ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.wrapSetter_(window[type].prototype, property,\n                         SET_ATTRIBUTE_TYPE_MAP[type][attribute]);\n      }\n    }\n  }\n\n  /**\n   * Uninstalls wrappers for directly setting properties\n   * based on SET_ATTRIBUTE_TYPE_MAP.\n   * @private\n   */\n  uninstallPropertySetWrappers_() {\n    /* eslint-disable guard-for-in */\n    for (let type of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP)) {\n      for (let attribute of getOwnPropertyNames(SET_ATTRIBUTE_TYPE_MAP[type])) {\n        const property = attribute in ATTR_PROPERTY_MAP ?\n              ATTR_PROPERTY_MAP[attribute] : attribute;\n        this.restoreSetter_(window[type].prototype, property);\n      }\n    }\n  }\n\n  /** Wraps set attribute with an enforcement function. */\n  wrapSetAttribute_() {\n    let that = this;\n    this.wrapFunction_(\n        Element.prototype,\n        'setAttribute',\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n    this.wrapFunction_(\n      Element.prototype,\n      'setAttributeNS',\n      /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.setAttributeNSWrapper_\n              .bind(that, this, originalFn)\n              .apply(that, args);\n        });\n  }\n\n  /**\n   * Returns the required type for the setAtrtibute call.\n   * @param  {!Object} context The object to infer the type of attribute of.\n   * @param  {string} attrName The attribute name.\n   * @return {Function} The type to enforce, or null if no contract is found.\n   */\n  getRequiredTypeForAttribute_(context, attrName) {\n      let ctor = context.constructor;\n      do {\n        let name;\n        let type = ctor && (name = getConstructorName_(ctor)) &&\n            SET_ATTRIBUTE_TYPE_MAP[name] &&\n            SET_ATTRIBUTE_TYPE_MAP[name][attrName];\n\n        if (type || ctor == HTMLElement) {\n          // Stop at HTMLElement.\n          return /** @type {Function} */ (type);\n        }\n        // Explore the prototype chain.\n      } while (ctor && (ctor = getPrototypeOf(ctor.prototype).constructor));\n\n      return null;\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttribute.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttribute function.\n   * @return {*}\n   */\n  setAttributeWrapper_(context, originalFn, ...args) {\n    // Note(slekies): In a normal application constructor should never be null.\n    // However, there are no guarantees. If the constructor is null, we cannot\n    // determine whether a special type is required. In order to not break the\n    // application, we will not do any further type checks and pass the call\n    // to setAttribute.\n    if (context.constructor !== null) {\n      let attrName = (args[0] = String(args[0])).toLowerCase();\n      let type = this.getRequiredTypeForAttribute_(context, attrName);\n\n      if (type instanceof Function) {\n        return this.enforce_(\n          context, 'setAttribute', type, originalFn, 1, args);\n      }\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n  /**\n   * Enforces type checking for Element.prototype.setAttributeNS.\n   * @param {!Object} context The context for the call to the original function.\n   * @param {!Function} originalFn The original setAttributeNS function.\n   * @return {*}\n   */\n  setAttributeNSWrapper_(context, originalFn, ...args) {\n    /**\n     * @param {string} ns the namespace URL.\n     * @return {boolean} true iff the given argument is an HTML namespace.\n     */\n    function isHtmlNamespace(ns) {\n      return true; // TODO(msamuel): implement me\n    }\n    // See the note from setAttributeWrapper_ above.\n    if (context.constructor !== null) {\n      let ns = (args[0] = String(args[0])).toLowerCase();\n      let attrName = (args[1] = String(args[1])).toLowerCase();\n      if (isHtmlNamespace(ns)) {\n        let name;\n        let type = context.constructor &&\n            (name = getConstructorName_(context.constructor)) &&\n            SET_ATTRIBUTE_TYPE_MAP[name] &&\n            SET_ATTRIBUTE_TYPE_MAP[name][attrName];\n\n        if (type instanceof Function) {\n          return this.enforce_(\n            context, 'setAttributeNS', type, originalFn, 2, args);\n        }\n      }\n      // TODO(msamuel): handle SVG namespace.  See TODO(slekies) above.\n    }\n\n    return originalFn.apply(context, args);\n  }\n\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {number} argNumber Number of the argument to enforce the type of.\n   * @private\n   */\n  wrapWithEnforceFunction_(object, name, type, argNumber) {\n    let that = this;\n    this.wrapFunction_(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @param {function(!Function, ...*)} originalFn\n         * @return {*}\n         */\n        function(originalFn, ...args) {\n          return that.enforce_.call(that, this, name, type, originalFn,\n                                    argNumber, args);\n        });\n  }\n\n\n  /**\n   * Wraps an existing function with a given function body and stores the\n   * original function.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {function(!Function, ...*)} functionBody The wrapper function.\n   */\n  wrapFunction_(object, name, functionBody) {\n    let descriptor = getOwnPropertyDescriptor(object, name);\n    let originalFn = /** @type function(*):* */ (\n        descriptor ? descriptor.value : null);\n\n    if (!(originalFn instanceof Function)) {\n      throw new TypeError(\n          'Property ' + name + ' on object' + object + ' is not a function');\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error(\n          `TrustedTypesEnforcer: Double installation detected: ${key} ${name}`);\n    }\n    installFunction(\n        object,\n        name,\n        /**\n         * @this {TrustedTypesEnforcer}\n         * @return {*}\n         */\n        function(...args) {\n          return functionBody.bind(this, originalFn).apply(this, args);\n        });\n    this.originalSetters_[key] = originalFn;\n  }\n\n  /**\n   * Wraps a setter with the enforcement wrapper.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Function} type The type to enforce.\n   * @param {!Object=} descriptorObject If present, will reuse the\n   *   setter/getter from this one, instead of object. Used for redefining\n   *   setters in subclasses.\n   * @private\n   */\n  wrapSetter_(object, name, type, descriptorObject = undefined) {\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n\n    let useObject = descriptorObject || object;\n\n    let descriptor = getOwnPropertyDescriptor(useObject, name);\n\n    let originalSetter = /** @type {function(*):*} */ (descriptor ?\n        descriptor.set : null);\n\n    if (!(originalSetter instanceof Function)) {\n      throw new TypeError(\n          'No setter for property ' + name + ' on object' + object);\n    }\n\n    let key = this.getKey_(object, name);\n    if (this.originalSetters_[key]) {\n      throw new Error(\n          `TrustedTypesEnforcer: Double installation detected: ${key} ${name}`);\n    }\n    let that = this;\n    /**\n     * @this {TrustedTypesEnforcer}\n     * @param {*} value\n     */\n    let enforcingSetter = function(value) {\n          that.enforce_.call(that, this, name, type, originalSetter, 0,\n                             [value]);\n        };\n\n    if (useObject === object) {\n      installSetter(\n          object,\n          name,\n          enforcingSetter);\n    } else {\n      // Since we're creating a new setter in subclass, we also need to\n      // overwrite the getter.\n      installSetterAndGetter(\n          object,\n          name,\n          enforcingSetter,\n          descriptor.get\n      );\n    }\n    this.originalSetters_[key] = originalSetter;\n  }\n\n  /**\n   * Restores the original setter for the property, as encountered during\n   * install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @param {!Object=} descriptorObject If present, will restore the original\n   *   setter/getter from this one, instead of object.\n   * @private\n   */\n  restoreSetter_(object, name, descriptorObject = undefined) {\n    let key = this.getKey_(object, name);\n    if (descriptorObject && !isPrototypeOf.call(descriptorObject, object)) {\n      throw new Error('Invalid prototype chain');\n    }\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          // eslint-disable-next-line max-len\n          `TrustedTypesEnforcer: Cannot restore (double uninstallation?): ${key} ${name}`);\n    }\n    if (descriptorObject) {\n      // We have to also overwrite a getter.\n      installSetterAndGetter(object, name, this.originalSetters_[key],\n          getOwnPropertyDescriptor(descriptorObject, name).get);\n    } else {\n      installSetter(object, name, this.originalSetters_[key]);\n    }\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Restores the original method of an object, as encountered during install().\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @private\n   */\n  restoreFunction_(object, name) {\n    let key = this.getKey_(object, name);\n    if (!this.originalSetters_[key]) {\n      throw new Error(\n          // eslint-disable-next-line max-len\n          `TrustedTypesEnforcer: Cannot restore (double uninstallation?): ${key} ${name}`);\n    }\n    installFunction(object, name, this.originalSetters_[key]);\n    delete this.originalSetters_[key];\n  }\n\n  /**\n   * Returns the key name for caching original setters.\n   * @param {!Object} object The object of the to-be-wrapped property.\n   * @param {string} name The name of the property.\n   * @return {string} Key name.\n   * @private\n   */\n  getKey_(object, name) {\n    // TODO(msamuel): Can we use Object.prototype.toString.call(object)\n    // to get an unspoofable string here?\n    // TODO(msamuel): fail on '-' in object.constructor.name?\n    // No Function.name in IE 11\n    const ctrName = '' + (\n      object.constructor.name ?\n      object.constructor.name :\n      object.constructor);\n    return ctrName + '-' + name;\n  }\n\n  /**\n   * Logs and enforces TrustedTypes depending on the given configuration.\n   * @template T\n   * @param {!Object} context The object that the setter is called for.\n   * @param {string} propertyName The name of the property.\n   * @param {!Function} typeToEnforce The type to enforce.\n   * @param {function(?):T} originalSetter Original setter.\n   * @param {number} argNumber Number of argument to enforce the type of.\n   * @param {Array} args Arguments.\n   * @return {T}\n   * @private\n   */\n  enforce_(context, propertyName, typeToEnforce, originalSetter, argNumber,\n           args) {\n    let value = args[argNumber];\n    const typeName = '' + typeToEnforce.name;\n    // If typed value is given, pass through.\n    if (TYPE_CHECKER_MAP.hasOwnProperty(typeName) &&\n        TYPE_CHECKER_MAP[typeName](value)) {\n        if (stringifyForRangeHack &&\n            propertyName == 'createContextualFragment') {\n          // IE 11 hack, somehow the value is not stringified implicitly.\n          args[argNumber] = args[argNumber].toString();\n        }\n      return apply(originalSetter, context, args);\n    }\n\n    if (typeToEnforce === TrustedTypes.TrustedScript) {\n      const isInlineEventHandler =\n          propertyName == 'setAttribute' ||\n          propertyName === 'setAttributeNS' ||\n          apply(slice, propertyName, [0, 2]) === 'on';\n      // If a function (instead of string) is passed to inline event attribute,\n      // or set(Timeout|Interval), pass through.\n      const propertyAcceptsFunctions =\n          propertyName === 'setInterval' ||\n          propertyName === 'setTimeout' ||\n          isInlineEventHandler;\n      if ((propertyAcceptsFunctions && typeof value === 'function') ||\n          (isInlineEventHandler && value === null)) {\n        return apply(originalSetter, context, args);\n      }\n    }\n\n    // Apply a fallback policy, if it exists.\n    const fallback = this.config_.fallbackPolicyName;\n    if (fallback) {\n      const fallbackPolicy = getExposedPolicy.call(TrustedTypes, fallback);\n      if (fallbackPolicy && TYPE_CHECKER_MAP.hasOwnProperty(typeName)) {\n        let fallbackValue;\n        let exceptionThrown;\n        try {\n          fallbackValue = fallbackPolicy[TYPE_PRODUCER_MAP[typeName]](value);\n        } catch (e) {\n          exceptionThrown = true;\n        }\n        if (!exceptionThrown) {\n          args[argNumber] = fallbackValue;\n          return apply(originalSetter, context, args);\n        }\n      }\n    }\n\n    let contextName = getConstructorName_(context.constructor) || '' + context;\n    let message = `Failed to set ${propertyName} on ${contextName}: `\n        + `This property requires ${typeName}.`;\n\n    if (this.config_.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      console.warn(message, propertyName, context, typeToEnforce, value);\n    }\n\n    // Unconditionally dispatch an event.\n    if (typeof SecurityPolicyViolationEvent == 'function') {\n      let blockedURI = '';\n      if (typeToEnforce === TrustedTypes.TrustedURL ||\n          typeToEnforce === TrustedTypes.TrustedScriptURL) {\n        blockedURI = parseUrl_(value) || '';\n        if (blockedURI) {\n          blockedURI = blockedURI.href;\n        }\n      }\n      const valueSlice = apply(slice, '' + value, [0, 40]);\n      const event = new SecurityPolicyViolationEvent(\n        'securitypolicyviolation',\n        {\n          'bubbles': true,\n          'blockedURI': blockedURI,\n          'disposition': this.config_.isEnforcementEnabled ?\n              'enforce' : 'report',\n          'documentURI': document.location.href,\n          'effectiveDirective': DIRECTIVE_NAME,\n          'originalPolicy': this.config_.cspString,\n          'statusCode': 0,\n          'violatedDirective': DIRECTIVE_NAME,\n          'sample': `${contextName}.${propertyName} ${valueSlice}`,\n        });\n      if (context.isConnected) {\n        context.dispatchEvent(event);\n      } else { // Fallback - dispatch an event on base document.\n        document.dispatchEvent(event);\n      }\n    }\n\n    if (this.config_.isEnforcementEnabled) {\n      throw new TypeError(message);\n    } else { // pass-through\n      return apply(originalSetter, context, args);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes, TrustedTypePolicy, TrustedTypePolicyFactory} from\n    '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n/**\n * Sets up the public Trusted Types API in the global object.\n */\nfunction setupPolyfill() {\n  // Make sure Closure compiler exposes the names.\n  if (typeof window === 'undefined' ||\n      typeof window['TrustedTypes'] !== 'undefined') {\n    return;\n  }\n\n  const publicApi = Object.create(TrustedTypePolicyFactory.prototype);\n  Object.assign(publicApi, {\n    'isHTML': tt.isHTML,\n    'isURL': tt.isURL,\n    'isScriptURL': tt.isScriptURL,\n    'isScript': tt.isScript,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n    '_isPolyfill_': true,\n  });\n  window['TrustedTypes'] = Object.freeze(publicApi);\n\n  window['TrustedHTML'] = tt.TrustedHTML;\n  window['TrustedURL'] = tt.TrustedURL;\n  window['TrustedScriptURL'] = tt.TrustedScriptURL;\n  window['TrustedScript'] = tt.TrustedScript;\n  window['TrustedTypePolicy'] = TrustedTypePolicy;\n  window['TrustedTypePolicyFactory'] = TrustedTypePolicyFactory;\n}\n\nsetupPolyfill();\n\nexport default tt;\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that enforces the types.\n */\nimport {TrustedTypesEnforcer} from '../enforcer.js';\nimport {TrustedTypeConfig} from '../data/trustedtypeconfig.js';\n/* eslint-disable no-unused-vars */\nimport TrustedTypes from './api_only.js';\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Tries to guess a CSP policy from:\n *  - the current polyfill script element text content (if prefixed with\n *    \"Content-Security-Policy:\")\n *  - the data-csp attribute value of the current script element.\n *  - meta header\n * @return {?string} Guessed CSP value, or null.\n */\nfunction detectPolicy() {\n    try {\n        const currentScript = document.currentScript || (function() {\n          let scripts = document.getElementsByTagName('script');\n          return scripts[scripts.length - 1];\n        })();\n\n        const bodyPrefix = 'Content-Security-Policy:';\n        if (currentScript &&\n            currentScript.textContent.trim().substr(0, bodyPrefix.length) ==\n                bodyPrefix) {\n            return currentScript.textContent.trim().slice(bodyPrefix.length);\n        }\n        if (currentScript.dataset['csp']) {\n            return currentScript.dataset['csp'];\n        }\n        const cspInMeta = document.head.querySelector(\n            'meta[http-equiv^=\"Content-Security-Policy\"]');\n        if (cspInMeta) {\n            return cspInMeta['content'].trim();\n        }\n    } catch (e) {\n        return null;\n    }\n    return null;\n}\n\n/**\n * Bootstraps all trusted types polyfill and their enforcement.\n */\nexport function bootstrap() {\n  const csp = detectPolicy();\n  const config = csp ? TrustedTypeConfig.fromCSP(csp) : new TrustedTypeConfig(\n    /* isLoggingEnabled */ false,\n    /* isEnforcementEnabled */ false,\n    /* fallbackPolicyName */ 'default',\n    /* allowedPolicyNames */ ['*']);\n\n  const trustedTypesEnforcer = new TrustedTypesEnforcer(config);\n\n  trustedTypesEnforcer.install();\n}\n\n/**\n * Determines if the enforcement should be enabled.\n * @return {boolean}\n */\nfunction shouldBootstrap() {\n  const rootProperty = 'TrustedTypes';\n  if (window[rootProperty] && !window[rootProperty]['_isPolyfill_']) {\n    // Native implementation exists\n    return false;\n  }\n  return true;\n}\n\n// Bootstrap only if native implementation is missing.\nif (shouldBootstrap()) {\n    bootstrap();\n}\n"]}