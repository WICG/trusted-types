{
"version":3,
"file":"trustedtypes.api_only.build.js",
"lineCount":14,
"mappings":"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",
"sources":["src/trustedtypes.js","src/polyfill/api_only.js"],
"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst rejectInputFn = (s) => {\n  throw new TypeError('undefined conversion');\n};\n\n/**\n * @constructor\n * @property {!function(string):TrustedHTML} createHTML\n * @property {!function(string):TrustedURL} createURL\n * @property {!function(string):TrustedScriptURL} createScriptURL\n * @property {!function(string):TrustedScript} createScript\n * @property {!string} name\n */\nexport const TrustedTypePolicy = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/**\n * @constructor\n */\nexport const TrustedTypePolicyFactory = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nlet TrustedTypesInnerPolicy = {};\n/* eslint-enable no-unused-vars */\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (let key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Map of all exposed policies, keyed by policy name.\n   * @type {Map<string,!TrustedTypePolicy>}\n   */\n  const exposedPolicies = selfContained(new Map());\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n                     {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createURL': TrustedURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypePolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          let result = method('' + s);\n          if (result === undefined || result === null) {\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    let policy = create(TrustedTypePolicy.prototype);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    defineProperty(policy, 'name', {\n        value: policyName,\n        writable: false,\n        configurable: false,\n        enumerable: true,\n    });\n\n    return /** @type {!TrustedTypePolicy} */ (freeze(policy));\n  }\n\n  /**\n   * Returns a policy object, if given policy was exposed.\n   * @param  {string} name\n   * @return {?TrustedTypePolicy}\n   */\n  function getExposedPolicy(name) {\n    const pName = '' + name;\n    return exposedPolicies.get(pName) || null;\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @param  {boolean=} expose Iff true, the policy will be exposed (available\n   *   globally).\n   * @return {TrustedTypePolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   */\n  function createPolicy(name, policy, expose = false) {\n    const pName = '' + name; // Assert it's a string\n\n    if (pName == 'default' && !expose) {\n      const message = 'The default policy must be exposed';\n       if (DOMException) {\n        // Workaround for missing externs in Closure compiler.\n        throw new window['DOMException'](message, 'InvalidStateError');\n      } else {\n        throw new TypeError(message);\n      }\n    }\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('TrustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (expose) {\n      exposedPolicies.set(pName, wrappedPolicy);\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n\n  const api = create(TrustedTypePolicyFactory.prototype);\n  assign(api, {\n    // The main function to create policies.\n    createPolicy,\n\n    // Policy getter\n    getExposedPolicy,\n\n    getPolicyNames,\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    TrustedHTML: TrustedHTML,\n    TrustedURL: TrustedURL,\n    TrustedScriptURL: TrustedScriptURL,\n    TrustedScript: TrustedScript,\n  });\n\n  return {\n    TrustedTypes: freeze(api),\n    setAllowedPolicyNames,\n  };\n};\n\n\nexport const {\n  TrustedTypes,\n  setAllowedPolicyNames,\n} = trustedTypesBuilderTestOnly();\n\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes, TrustedTypePolicy, TrustedTypePolicyFactory} from\n    '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n/**\n * Sets up the public Trusted Types API in the global object.\n */\nfunction setupPolyfill() {\n  // Make sure Closure compiler exposes the names.\n  if (typeof window === 'undefined' ||\n      typeof window['TrustedTypes'] !== 'undefined') {\n    return;\n  }\n\n  const publicApi = Object.create(TrustedTypePolicyFactory.prototype);\n  Object.assign(publicApi, {\n    'isHTML': tt.isHTML,\n    'isURL': tt.isURL,\n    'isScriptURL': tt.isScriptURL,\n    'isScript': tt.isScript,\n    'createPolicy': tt.createPolicy,\n    'getExposedPolicy': tt.getExposedPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n    '_isPolyfill_': true,\n  });\n  window['TrustedTypes'] = Object.freeze(publicApi);\n\n  window['TrustedHTML'] = tt.TrustedHTML;\n  window['TrustedURL'] = tt.TrustedURL;\n  window['TrustedScriptURL'] = tt.TrustedScriptURL;\n  window['TrustedScript'] = tt.TrustedScript;\n  window['TrustedTypePolicy'] = TrustedTypePolicy;\n  window['TrustedTypePolicyFactory'] = TrustedTypePolicyFactory;\n}\n\nsetupPolyfill();\n\nexport default tt;\n"],
"names":["rejectInputFn","TypeError","TrustedTypePolicy","TrustedTypePolicyFactory","TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","prototype","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","s","result","allowedValue","o","factory","policy","createTypeMapping","writable","configurable","enumerable","assign","Object","forEach","push","Array","Symbol","WeakMap","policyNames","exposedPolicies","Map","allowedNames","enforceNameWhitelist","TrustedType","TrustedURL","TrustedScriptURL","TrustedHTML","TrustedScript","createFunctionAllowed","hasOwnProperty","api","createPolicy","expose","pName","DOMException","window","message","indexOf","call","console","warn","wrappedPolicy","getExposedPolicy","getPolicyNames","slice","isHTML","isURL","isScriptURL","isScript","setAllowedPolicyNames","allowedPolicyNames","length","el","publicApi"]
}
