{"version":3,"sources":["src/trustedtypes.js","src/polyfill/api_only.js"],"names":["rejectInputFn","TypeError","toLowerCase","toUpperCase","String","prototype","TrustedTypePolicy","TrustedTypePolicyFactory","TrustedTypes","trustedTypesBuilderTestOnly","privates","obj","v","privateMap","get","undefined","create","set","selfContained","collection","proto","getPrototypeOf","ObjectPrototype","Error","key","getOwnPropertyNames","defineProperty","value","lockdownTrustedType","SubClass","canonName","freeze","name","isTrustedTypeChecker","type","has","wrapPolicy","policyName","innerPolicy","creator","Ctor","methodName","method","policySpecificType","creatorSymbol","s","result","allowedValue","o","factory","policy","createTypeMapping","writable","configurable","enumerable","getTypeInternal_","tag","container","elNs","attrNs","canonicalTag","apply","ns","HTML_NS","map","hasOwnProperty","TYPE_MAP","assign","Object","forEach","push","Array","Symbol","WeakMap","policyNames","allowedNames","defaultPolicy","enforceNameWhitelist","TrustedType","TrustedURL","TrustedScriptURL","TrustedHTML","TrustedScript","XLINK_NS","SVG_NS","ATTR_PROPERTY_MAP","HTMLIFrameElement","keys","attr","HTMLElement","slice","createFunctionAllowed","api","createPolicy","indexOf","call","console","warn","wrappedPolicy","DEFAULT_POLICY_NAME","getPolicyNames","isHTML","isURL","isScriptURL","isScript","getAttributeType","tagName","attribute","elementNs","attributeNs","canonicalAttr","getPropertyType","property","getTypeMapping","namespaceUri","document","documentElement","namespaceURI","e","JSON","parse","stringify","setAllowedPolicyNames","allowedPolicyNames","length","el","getDefaultPolicy","resetDefaultPolicy","splice","window","publicApi","tt"],"mappings":"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","file":"trustedtypes.api_only.build.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\nconst rejectInputFn = (s) => {\n  throw new TypeError('undefined conversion');\n};\n\nconst {toLowerCase, toUpperCase} = String.prototype;\n\nexport const HTML_NS = 'http://www.w3.org/1999/xhtml';\nexport const XLINK_NS = 'http://www.w3.org/1999/xlink';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\n\n/**\n * @constructor\n * @property {!function(string):TrustedHTML} createHTML\n * @property {!function(string):TrustedURL} createURL\n * @property {!function(string):TrustedScriptURL} createScriptURL\n * @property {!function(string):TrustedScript} createScript\n * @property {!string} name\n */\nexport const TrustedTypePolicy = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/**\n * @constructor\n */\nexport const TrustedTypePolicyFactory = function() {\n  throw new TypeError('Illegal constructor');\n};\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {TrustedTypesInnerPolicy}\n * @property {function(string):string} createHTML\n * @property {function(string):string} createURL\n * @property {function(string):string} createScriptURL\n * @property {function(string):string} createScript\n */\nconst TrustedTypesInnerPolicy = {};\n\n/**\n * @typedef {!Object<string, {\n *   attributes: !Object<string, string>,\n *   properties: !Object<string, string>}>}\n */\nconst TrustedTypesTypeMap = {};\n/* eslint-enable no-unused-vars */\n\nexport const DEFAULT_POLICY_NAME = 'default';\n\n\nexport const trustedTypesBuilderTestOnly = function() {\n  // Capture common names early.\n  const {\n    assign, create, defineProperty, freeze, getOwnPropertyNames,\n    getPrototypeOf, prototype: ObjectPrototype,\n  } = Object;\n\n  const {hasOwnProperty} = ObjectPrototype;\n\n  const {\n    forEach, push,\n  } = Array.prototype;\n\n  const creatorSymbol = Symbol();\n\n  /**\n   * Getter for the privateMap.\n   * @param  {Object} obj Key of the privateMap\n   * @return {Object<string, string>} Private storage.\n   */\n  const privates = function(obj) {\n    let v = privateMap.get(obj);\n    if (v === undefined) {\n      v = create(null); // initialize the private storage.\n      privateMap.set(obj, v);\n    }\n    return v;\n  };\n\n  /**\n   * Called before attacker-controlled code on an internal collections,\n   * copies prototype members onto the instance directly, so that later\n   * changes to prototypes cannot expose collection internals.\n   * @param {!T} collection\n   * @return {!T} collection\n   * @template T\n   */\n  function selfContained(collection) {\n    const proto = getPrototypeOf(collection);\n    if (proto == null || getPrototypeOf(proto) !== ObjectPrototype) {\n      throw new Error(); // Loop below is insufficient.\n    }\n    for (const key of getOwnPropertyNames(proto)) {\n      defineProperty(collection, key, {value: collection[key]});\n    }\n    return collection;\n  }\n\n  /**\n   * Map for private properties of Trusted Types object.\n   * This is so that the access to the type constructor does not give\n   * the ability to create typed values.\n   * @type {WeakMap}\n   */\n  const privateMap = selfContained(new WeakMap());\n\n  /**\n   * List of all configured policy names.\n   * @type {Array<string>}\n   */\n  const policyNames = selfContained([]);\n\n  /**\n   * Allowed policy namess for policy names.\n   * @type {Array<string>}\n   */\n  const allowedNames = selfContained([]);\n\n  /**\n   * A reference to a default policy, if created.\n   * @type {TrustedTypePolicy}\n   */\n  let defaultPolicy = null;\n\n  /**\n   * Whether to enforce allowedNames in createPolicy().\n   * @type {boolean}\n   */\n  let enforceNameWhitelist = false;\n\n\n  /**\n   * A value that is trusted to have certain security-relevant properties\n   * because the sources of such values are controlled.\n   */\n  class TrustedType {\n    /**\n     * Constructor for TrustedType. Only allowed to be called from within a\n     * policy.\n     * @param {symbol} s creatorSymbol\n     * @param {string} policyName The name of the policy this object was\n     *   created by.\n     */\n    constructor(s, policyName) {\n      // TODO: Figure out if symbol is needed, if the value is in privateMap.\n      if (s !== creatorSymbol) {\n        throw new Error('cannot call the constructor');\n      }\n      defineProperty(this, 'policyName',\n          {value: '' + policyName, enumerable: true});\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    toString() {\n      return privates(this)['v'];\n    }\n\n    /**\n     * Returns the wrapped string value of the object.\n     * @return {string}\n     * @override\n     */\n    valueOf() {\n      return privates(this)['v'];\n    }\n  }\n\n  /**\n   * @param {function(new:TrustedType, symbol, string)} SubClass\n   * @param {string} canonName The class name which should be independent of\n   *     any renaming pass and which is relied upon by the enforcer and for\n   *     native type interop.\n   */\n  function lockdownTrustedType(SubClass, canonName) {\n    freeze(SubClass.prototype);\n    delete SubClass.name;\n    defineProperty(SubClass, 'name', {value: canonName});\n  }\n\n  /**\n   * Trusted URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedURL, 'TrustedURL');\n\n  /**\n   * Trusted Script URL object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScriptURL extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScriptURL, 'TrustedScriptURL');\n\n  /**\n   * Trusted HTML object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedHTML extends TrustedType {\n  }\n  lockdownTrustedType(TrustedHTML, 'TrustedHTML');\n\n  /**\n   * Trusted Script object wrapping a string that can only be created from a\n   * TT policy.\n   */\n  class TrustedScript extends TrustedType {\n  }\n  lockdownTrustedType(TrustedScript, 'TrustedScript');\n\n  lockdownTrustedType(TrustedType, 'TrustedType');\n\n  /**\n   * A map of attribute / property names to allowed types\n   * for known namespaces.\n   * @type {!Object<string,!TrustedTypesTypeMap>}\n   * @export\n   */\n  const TYPE_MAP = {\n    [HTML_NS]: {\n      // TODO(koto): Figure out what to to with <link>\n      'A': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'AREA': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'AUDIO': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'BASE': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'BUTTON': {\n        'attributes': {\n          'formaction': TrustedURL.name,\n        },\n      },\n      'EMBED': {\n        'attributes': {\n          'src': TrustedScriptURL.name,\n        },\n      },\n      'FORM': {\n        'attributes': {\n          'action': TrustedURL.name,\n        },\n      },\n      'FRAME': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'IFRAME': {\n        'attributes': {\n          'src': TrustedURL.name,\n          'srcdoc': TrustedHTML.name,\n        },\n      },\n      'IMG': {\n        'attributes': {\n          'src': TrustedURL.name,\n          // TODO(slekies): add special handling for srcset\n        },\n      },\n      'INPUT': {\n        'attributes': {\n          'src': TrustedURL.name,\n          'formaction': TrustedURL.name,\n        },\n      },\n      'LINK': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n      },\n      'OBJECT': {\n        'attributes': {\n          'data': TrustedScriptURL.name,\n          'codebase': TrustedScriptURL.name,\n        },\n      },\n      // TODO(koto): Figure out what to do with portals.\n      'SCRIPT': {\n        'attributes': {\n          'src': TrustedScriptURL.name,\n          'text': TrustedScript.name,\n        },\n        'properties': {\n          'innerText': TrustedScript.name,\n          'textContent': TrustedScript.name,\n          'text': TrustedScript.name,\n        },\n      },\n      'SOURCE': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'TRACK': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      'VIDEO': {\n        'attributes': {\n          'src': TrustedURL.name,\n        },\n      },\n      '*': {\n        'attributes': {},\n        'properties': {\n          'innerHTML': TrustedHTML.name,\n          'outerHTML': TrustedHTML.name,\n        },\n      },\n    },\n    [XLINK_NS]: {\n      '*': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n        'properties': {},\n      },\n    },\n    [SVG_NS]: {\n      '*': {\n        'attributes': {\n          'href': TrustedURL.name,\n        },\n        'properties': {},\n      },\n    },\n  };\n\n  /**\n   * A map of element property to HTML attribute names.\n   * @type {!Object<string, string>}\n   */\n  const ATTR_PROPERTY_MAP = {\n    'codebase': 'codeBase',\n    'formaction': 'formAction',\n  };\n\n  // Edge doesn't support srcdoc.\n  if (!('srcdoc' in HTMLIFrameElement.prototype)) {\n    delete TYPE_MAP[HTML_NS]['IFRAME']['attributes']['srcdoc'];\n  }\n\n  // in HTML, clone attributes into properties.\n  for (const tag of Object.keys(TYPE_MAP[HTML_NS])) {\n    if (!TYPE_MAP[HTML_NS][tag]['properties']) {\n      TYPE_MAP[HTML_NS][tag]['properties'] = {};\n    }\n    for (const attr of Object.keys(TYPE_MAP[HTML_NS][tag]['attributes'])) {\n      TYPE_MAP[HTML_NS][tag]['properties'][\n          ATTR_PROPERTY_MAP[attr] ? ATTR_PROPERTY_MAP[attr] : attr\n      ] = TYPE_MAP[HTML_NS][tag]['attributes'][attr];\n    }\n  }\n\n  // Add inline event handlers attribute names.\n  for (const name of getOwnPropertyNames(HTMLElement.prototype)) {\n    if (name.slice(0, 2) === 'on') {\n      TYPE_MAP[HTML_NS]['*']['attributes'][name] = 'TrustedScript';\n    }\n  }\n\n  /**\n   * @type {!Object<string,!Function>}\n   */\n  const createTypeMapping = {\n    'createHTML': TrustedHTML,\n    'createScriptURL': TrustedScriptURL,\n    'createURL': TrustedURL,\n    'createScript': TrustedScript,\n  };\n\n  const createFunctionAllowed = createTypeMapping.hasOwnProperty;\n\n  /**\n   * Function generating a type checker.\n   * @template T\n   * @param  {T} type The type to check against.\n   * @return {function(*):boolean}\n   */\n  function isTrustedTypeChecker(type) {\n    return (obj) => (obj instanceof type) && privateMap.has(obj);\n  }\n\n  /**\n   * Wraps a user-defined policy rules with TT constructor\n   * @param  {string} policyName The policy name\n   * @param  {TrustedTypesInnerPolicy} innerPolicy InnerPolicy\n   * @return {!TrustedTypePolicy} Frozen policy object\n   */\n  function wrapPolicy(policyName, innerPolicy) {\n    /**\n     * @template T\n     * @param {function(new:T, symbol, string)} Ctor a trusted type constructor\n     * @param {string} methodName the policy factory method name\n     * @return {function(string):!T} a factory that produces instances of Ctor.\n     */\n    function creator(Ctor, methodName) {\n      // This causes thisValue to be null when called below.\n      const method = innerPolicy[methodName] || rejectInputFn;\n      const policySpecificType = freeze(new Ctor(creatorSymbol, policyName));\n      const factory = {\n        [methodName](s) { // Trick to get methodName to show in stacktrace.\n          let result = method('' + s);\n          if (result === undefined || result === null) {\n            result = '';\n          }\n          const allowedValue = '' + result;\n          const o = freeze(create(policySpecificType));\n          privates(o)['v'] = allowedValue;\n          return o;\n        },\n      }[methodName];\n      return freeze(factory);\n    }\n\n    const policy = create(TrustedTypePolicy.prototype);\n\n    for (const name of getOwnPropertyNames(createTypeMapping)) {\n      policy[name] = creator(createTypeMapping[name], name);\n    }\n    defineProperty(policy, 'name', {\n      value: policyName,\n      writable: false,\n      configurable: false,\n      enumerable: true,\n    });\n\n    return /** @type {!TrustedTypePolicy} */ (freeze(policy));\n  }\n\n  /**\n   * Returns the name of the trusted type required for a given element\n   *   attribute.\n   * @param {string} tagName The name of the tag of the element.\n   * @param {string} attribute The name of the attribute.\n   * @param {string=} elementNs Element namespace.\n   * @param {string=} attributeNs The attribute namespace.\n   * @return {string|undefined} Required type name or undefined, if a Trusted\n   *   Type is not required.\n   */\n  function getAttributeType(tagName, attribute, elementNs = '',\n      attributeNs = '') {\n    const canonicalAttr = toLowerCase.apply(String(attribute));\n    return getTypeInternal_(tagName, 'attributes', canonicalAttr,\n        elementNs, attributeNs);\n  }\n\n  /**\n   * Returns a type name from a type map.\n   * @param {string} tag A tag name.\n   * @param {string} container 'attributes' or 'properties'\n   * @param {string} name The attribute / property name.\n   * @param {string=} elNs Element namespace.\n   * @param {string=} attrNs Attribute namespace.\n   * @return {string|undefined}\n   * @private\n   */\n  function getTypeInternal_(tag, container, name, elNs = '', attrNs = '') {\n    const canonicalTag = toUpperCase.apply(String(tag));\n\n    let ns = attrNs ? attrNs : elNs;\n    if (!ns) {\n      ns = HTML_NS;\n    }\n    const map = hasOwnProperty.apply(TYPE_MAP, [ns]) ? TYPE_MAP[ns] : null;\n    if (!map) {\n      return;\n    }\n    if (hasOwnProperty.apply(map, [canonicalTag]) &&\n        map[canonicalTag] &&\n        hasOwnProperty.apply(map[canonicalTag][container], [name]) &&\n        map[canonicalTag][container][name]) {\n      return map[canonicalTag][container][name];\n    }\n\n    if (hasOwnProperty.apply(map, ['*']) &&\n        hasOwnProperty.apply(map['*'][container], [name]) &&\n        map['*'][container][name]) {\n      return map['*'][container][name];\n    }\n  }\n\n  /**\n   * Returns the name of the trusted type required for a given element property.\n   * @param {string} tagName The name of the tag of the element.\n   * @param {string} property The property.\n   * @param {string=} elementNs Element namespace.\n   * @return {string|undefined} Required type name or undefined, if a Trusted\n   *   Type is not required.\n   */\n  function getPropertyType(tagName, property, elementNs = '') {\n    // TODO: Support namespaces.\n    return getTypeInternal_(tagName, 'properties', String(property), elementNs);\n  }\n\n  /**\n   * Returns the type map-like object, that resolves a name of a type for a\n   * given tag + attribute / property in a given namespace.\n   * The keys of the map are uppercase tag names. Map entry has mappings between\n   * a lowercase attribute name / case-sensitive property name and a name of the\n   * type that is required for that attribute / property.\n   * Example entry for 'IMG': {\"attributes\": {\"src\": \"TrustedHTML\"}}\n   * @param {string=} namespaceUri The namespace URI (will use the current\n   *   document namespace URI if omitted).\n   * @return {TrustedTypesTypeMap}\n   */\n  function getTypeMapping(namespaceUri = '') {\n    if (!namespaceUri) {\n      try {\n        namespaceUri = document.documentElement.namespaceURI;\n      } catch (e) {\n        namespaceUri = HTML_NS;\n      }\n    }\n    /**\n     * @template T\n     * @private\n     * @param {T} o\n     * @return {T}\n     */\n    function deepClone(o) {\n      return JSON.parse(JSON.stringify(o));\n    }\n    const map = TYPE_MAP[namespaceUri];\n    if (!map) {\n      return {};\n    }\n    return deepClone(map);\n  }\n\n  /**\n   * Returns all configured policy names (even for non-exposed policies).\n   * @return {!Array<string>}\n   */\n  function getPolicyNames() {\n    // TODO(msamuel): Should we sort policyNames to avoid leaking or\n    // encouraging dependency on the order in which policy names are\n    // registered?  I think JavaScript builtin sorts are efficient for\n    // almost-sorted lists so the amortized cost is close to O(n).\n    return policyNames.slice();\n  }\n\n  /**\n   * Creates a TT policy.\n   *\n   * Returns a frozen object representing a policy - a collection of functions\n   * that may create TT objects based on the user-provided rules specified\n   * in the policy object.\n   *\n   * @param  {string} name A unique name of the policy.\n   * @param  {TrustedTypesInnerPolicy} policy Policy rules object.\n   * @return {TrustedTypePolicy} The policy that may create TT objects\n   *   according to the policy rules.\n   */\n  function createPolicy(name, policy) {\n    const pName = '' + name; // Assert it's a string\n\n    if (enforceNameWhitelist && allowedNames.indexOf(pName) === -1) {\n      throw new TypeError('Policy ' + pName + ' disallowed.');\n    }\n\n    if (policyNames.indexOf(pName) !== -1) {\n      throw new TypeError('Policy ' + pName + ' exists.');\n    }\n    // Register the name early so that if policy getters unwisely calls\n    // across protection domains to code that reenters this function,\n    // policy author still has rights to the name.\n    policyNames.push(pName);\n\n    // Only copy own properties of names present in createTypeMapping.\n    const innerPolicy = create(null);\n    if (policy && typeof policy === 'object') {\n      // Treat non-objects as empty policies.\n      for (const key of getOwnPropertyNames(policy)) {\n        if (createFunctionAllowed.call(createTypeMapping, key)) {\n          innerPolicy[key] = policy[key];\n        }\n      }\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('TrustedTypes.createPolicy ' + pName +\n          ' was given an empty policy');\n    }\n    freeze(innerPolicy);\n\n    const wrappedPolicy = wrapPolicy(pName, innerPolicy);\n\n    if (pName === DEFAULT_POLICY_NAME) {\n      defaultPolicy = wrappedPolicy;\n    }\n\n    return wrappedPolicy;\n  }\n\n  /**\n   * Applies the policy name whitelist.\n   * @param {!Array<string>} allowedPolicyNames\n   */\n  function setAllowedPolicyNames(allowedPolicyNames) {\n    if (allowedPolicyNames.indexOf('*') !== -1) { // Any policy name is allowed.\n      enforceNameWhitelist = false;\n    } else {\n      enforceNameWhitelist = true;\n      allowedNames.length = 0;\n      forEach.call(allowedPolicyNames, (el) => {\n        push.call(allowedNames, '' + el);\n      });\n    }\n  }\n\n  /**\n   * Returns the default policy, or null if it was not created.\n   * @return {TrustedTypePolicy}\n   */\n  function getDefaultPolicy() {\n    return defaultPolicy;\n  }\n\n  /**\n   * Resets the default policy.\n   */\n  function resetDefaultPolicy() {\n    defaultPolicy = null;\n    policyNames.splice(policyNames.indexOf(DEFAULT_POLICY_NAME), 1);\n  }\n\n  const api = create(TrustedTypePolicyFactory.prototype);\n  assign(api, {\n    // The main function to create policies.\n    createPolicy,\n\n    getPolicyNames,\n\n    // Type checkers, also validating the object was initialized through a\n    // policy.\n    isHTML: isTrustedTypeChecker(TrustedHTML),\n    isURL: isTrustedTypeChecker(TrustedURL),\n    isScriptURL: isTrustedTypeChecker(TrustedScriptURL),\n    isScript: isTrustedTypeChecker(TrustedScript),\n\n    getAttributeType,\n    getPropertyType,\n    getTypeMapping,\n\n    TrustedHTML: TrustedHTML,\n    TrustedURL: TrustedURL,\n    TrustedScriptURL: TrustedScriptURL,\n    TrustedScript: TrustedScript,\n  });\n\n  return {\n    TrustedTypes: freeze(api),\n    setAllowedPolicyNames,\n    getDefaultPolicy,\n    resetDefaultPolicy,\n  };\n};\n\n\nexport const {\n  TrustedTypes,\n  setAllowedPolicyNames,\n  getDefaultPolicy,\n  resetDefaultPolicy,\n} = trustedTypesBuilderTestOnly();\n\n","/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n */\n\n/**\n * @fileoverview Entry point for a polyfill that only defines the types\n * (i.e. no enforcement logic).\n */\nimport {TrustedTypes, TrustedTypePolicy, TrustedTypePolicyFactory} from\n  '../trustedtypes.js';\n\nconst tt = TrustedTypes;\n\n/**\n * Sets up the public Trusted Types API in the global object.\n */\nfunction setupPolyfill() {\n  // Make sure Closure compiler exposes the names.\n  if (typeof window === 'undefined' ||\n      typeof window['TrustedTypes'] !== 'undefined') {\n    return;\n  }\n\n  const publicApi = Object.create(TrustedTypePolicyFactory.prototype);\n  Object.assign(publicApi, {\n    'isHTML': tt.isHTML,\n    'isURL': tt.isURL,\n    'isScriptURL': tt.isScriptURL,\n    'isScript': tt.isScript,\n    'createPolicy': tt.createPolicy,\n    'getPolicyNames': tt.getPolicyNames,\n    'getAttributeType': tt.getAttributeType,\n    'getPropertyType': tt.getPropertyType,\n    'getTypeMapping': tt.getTypeMapping,\n    '_isPolyfill_': true,\n  });\n  window['TrustedTypes'] = Object.freeze(publicApi);\n\n  window['TrustedHTML'] = tt.TrustedHTML;\n  window['TrustedURL'] = tt.TrustedURL;\n  window['TrustedScriptURL'] = tt.TrustedScriptURL;\n  window['TrustedScript'] = tt.TrustedScript;\n  window['TrustedTypePolicy'] = TrustedTypePolicy;\n  window['TrustedTypePolicyFactory'] = TrustedTypePolicyFactory;\n}\n\nsetupPolyfill();\n\nexport default tt;\n"]}