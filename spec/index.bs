<!--
Before editing this document, please see
https://github.com/WICG/trusted-types/blob/master/README.md#spec-changes
-->

<pre class='metadata'>
Title: Trusted Types
Shortname: trusted-types
Group: WICG
Level: none
Status: CG-DRAFT
URL: https://wicg.github.io/trusted-types/dist/spec/
Editor: Krzysztof Kotowicz, Google LLC https://google.com, koto@google.com
Editor: Mike West, Google LLC https://google.com, mkwst@google.com
Repository: WICG/trusted-types
Abstract: An API that allows applications to lock down DOM XSS injection sinks to only accept non-spoofable, typed values in place of strings.
Markup Shorthands: algorithm yes, biblio yes, css no, dfn yes, markdown yes, markup yes
Ignored Terms: h1, h2, h3, h4, h5, h6, xmp, EmptyString
Complain About: missing-example-ids yes
<!-- WPT Path Prefix: /trusted-types/ # Cannot add this, as it requires all the tests to be referenced in the spec -->
</pre>

<pre class="anchors">
urlPrefix: https://html.spec.whatwg.org/multipage/common-dom-interfaces.html; type: dfn; spec: HTML
    text: reflect
url: https://www.w3.org/TR/DOM-Parsing/#h-the-domparser-interface; type: enum; spec: DOM-Parsing
    text: SupportedType
</pre>

<!-- TODO
Complain About: broken-links yes
-->

# Introduction # {#introduction}

*This section is not normative.*

DOM-Based Cross-Site Scripting (DOM XSS) occurs when a web application
takes a string value from an attacker-controlled source (e.g. the
document URL parameter, or postMessage channel) and passes that value
to one of the [[#injection-sinks|injection sinks]], that eventually causes execution of the
script payload controlled by the attacker.

This vulnerability type is prevalent in the web applications for two
reasons. For one, it's easy to introduce - there are over 60 different
injection sinks (e.g. `Element.innerHTML`, or `Location.href` setters).
A lot of those sinks are widely used, and are often passed an attacker-controlled
value without the developer realizing it. Secondly, DOM XSS is
difficult to prevent. Due to the dynamic nature of JavaScript it's
difficult to ascertain that this vulnerability is not present in a
given program - as such, DOM XSS is often missed during manual code
reviews, and automated code analysis. As an example,
`foo[bar] = aString` is a statement that potentially introduces DOM XSS.

This document defines [[#trusted-types|Trusted Types]] - an API that allows applications
to lock down DOM XSS injection sinks to only accept non-spoofable, typed values
in place of strings. These values can in turn only be created from
application-defined [[#policies|policies]], allowing the authors to define rules
guarding writing values to the DOM, and reducing the DOM XSS attack
surface to small, isolated parts of the web application codebase,
which are substantially easier to safeguard, monitor and review.


## Goals ## {#goals}

*   Minimize the likelihood of accidental DOM XSS introduction by the authors.

*   Encourage a design in which XSS-related security decisions are
    encapsulated within a small part of the application.

*   Reduce DOM XSS security review surface for complex web application codebases.


## Non-goals ## {#non-goals}

*   Address injections into server-side generated markup, in specific
    reflections into the body of the scripts running in a document.

Issue:  mention other solutions, like templating systems, or CSP for mitigating


## Use cases ## {#use-cases}

Issue: figure out if we need this section here. CSP has none, SRI has one and it looks useful.

*   An author maintains a complex web application written in a framework
    that uses a secure templating system to generate the UI
    components. The application also depends on 3rd party client-side
    libraries that perform auxiliary tasks (e.g. analytics, performance
    monitoring). To ensure that none of these components introduces DOM
    XSS vulnerabilities, author defines a Trusted Type policy in the
    templating policy and enables the enforcement for the DOM sinks.
*   Issue: Something about reducing the review surface


# Framework # {#framework}

## Injection sinks ## {#injection-sinks}

*This section is not normative.*

A DOM XSS <dfn>injection sink</dfn> is a function that evaluates an input
string value in a way that could result in XSS if that value is untrusted.

Examples of injection sinks include:

  * Functions that parse & insert HTML strings into he document like
    [[DOM-Parsing#widl-Element-innerHTML|Element.innerHTML]] setter
  * Setters for {{Element}} attributes that accept a URL of the code to load
    like {{HTMLScriptElement/src!!attribute|HTMLScriptElement.src}}
  * Setters for {{Element}} attributes that accept a code to execute like
    {{HTMLScriptElement/text!!attribute|HTMLScriptElement.text}}
  * Functions that execute code directly like `eval`.
  * Functions that accept URLs with `javascript:` scheme
  * Functions that create a new same-origin {{Document}} with caller-controlled
    markup like {{DOMParser/parseFromString()}}.

An application is vulnerable to DOM XSS if it permits a flow of data from an
attacker-controlled source and permits that data to reach an injection sink
without appropriate validation, sanitization or escaping.

It's difficult to determine if DOM XSS is present by analyzing the invocations
of [=injection sinks=], as the strings do not carry the information about the
provenance of their value. To allow the authors to control values reaching
sensitive DOM and JavaScript functions, we introduce Trusted Types.

Note: The exact list of injection sinks covered by this document is defined in
[[#integrations]].

Issue(WICG/trusted-types#43): Consider surfacing the DOM sink (node + attr) => type mapping in the API, to faciliate building HTML sanitizers.


## Trusted Types ## {#trusted-types}

We introduce the following list of
<dfn>Trusted Type</dfn>s indicating that a given value is
trusted by the authors to be used with an [=injection sink=] in a certain context.

Note: **Trusted** in this context signifies the fact that the application author
is confident that a given value can be safely used with an injection sink - she
*trusts* it does not introduce a vulnerability. That does not imply that the
value is indeed *safe*.

Note: This allows the authors to specify the intention when creating a given
value, and the user agents to introduce checks based on the type of
such value to preserve the authors' intent. For example, if the
authors intends a value to be used as a URL of an image, an attempt to
load a script from that URL would fail.

Note: All Trusted Types wrap over an immutable string, specified when the
objects are created. These objects are unforgable in a sense that
there is no JavaScript-exposed way to replace the inner string value
of a given object - it's stored in an internal slot with no setter
exposed.

Note: All Trusted Types stringifiers return the inner string value.
This makes it easy to incrementally migrate the application code into using
Trusted Types in place of DOM strings (it's possible to start
producing types in parts of the application, while still using and
accepting strings in other parts of the codebase). In that sense,
Trusted Types are backwards-compatible with the regular DOM APIs.

### TrustedTypes extended attribute ### {#!trustedtypes-extended-attribute}

To ensure that Trusted Types are required in DOM property setters [=injection sinks=], we introduce
<dfn data-dfn-type="extended-attribute" data-x="TrustedTypes" data-lt="TrustedTypes"><code>[TrustedTypes]</code></dfn>
IDL [=extended attributes|extended attribute=]. It indicates that the relevant setter algorithm is to be supplemented with additional
enforcing steps.

The {{TrustedTypes}} extended attribute [=extended attribute/takes an identifier=] as an argument.
The only valid values for the identifier are {{TrustedHTML}}, {{TrustedScript}}, {{TrustedScriptURL}} or {{TrustedURL}}.
This extended attribute must not appear on anything other than an attribute or an [=operation=] argument.
Additionally, it must not appear on readonly attributes.

When the extended attribute appears on an attribute, the setter for that attribute must run the following steps in place of the ones specified in their description:

 1. If [=relevant global object=] has an [=associated document=]:
    1. Set *value* to the result of running the [$Get Trusted Type compliant string$] algorithm, with *input* being the new value, *expectedType* being the {{TrustedType}} extended attribute identifier, and *document* being the [=relevant global object=]'s [=associated document=].
    1. If an exception was thrown, rethrow exception and abort further steps.
 1. Run the originally specified steps for this construct, using *value* as a new value to set.

Note: If the IDL attribute [=reflect/reflects=] a given content attribute, identical steps should be performed when the content attribute is modified by JavaScript code e.g. via ''Element.setAttribute()'' function.

When the extended attribute appears on an [=operation=] argument, before its operation is invoked, run the following steps:

 1. If [=relevant global object=] has an [=associated document=]:
    1. Set the new argument value to the result of running the [$Get Trusted Type compliant string$] algorithm, with *input* being the argument value, *expectedType* being the {{TrustedType}} extended attribute identifier, and *document* being the [=relevant global object=]'s [=associated document=].
    1. If an exception was thrown, rethrow exception and abort further steps.
 1. Invoke the originally specified steps for the operation.


### <dfn type>TrustedHTML</dfn> ### {#trusted-html}

The TrustedHTML interface represents a string that a developer can
confidently insert into an [=injection sink=] that will render it as HTML.
These objects are immutable
wrappers around a string, constructed via a {{TrustedTypePolicy}}'s
{{TrustedTypePolicy/createHTML(input)|createHTML}} method.

<pre class="idl">
[Exposed=Window]
interface TrustedHTML {
  stringifier;
};
</pre>

TrustedHTML objects have a `[[Data]]` internal slot which holds a
DOMString. The slot's value is set when the object is created, and
will never change during its lifetime.

To stringify a TrustedHTML object, return the DOMString from its
`[[Data]]` internal slot.

### <dfn type>TrustedScript</dfn> ### {#trusted-script}

The TrustedScript interface represents a string with an uncompiled
script body that a developer can confidently pass into an [=injection sink=]
that might lead to executing that script.
These objects are immutable wrappers
around a string, constructed via a {{TrustedTypePolicy}}'s
{{TrustedTypePolicy/createScript(input)|createScript}} method.

<pre class="idl">
[Exposed=Window]
interface TrustedScript {
  stringifier;
};
</pre>

TrustedScript objects have a `[[Data]]` internal slot which holds a
DOMString. The slot's value is set when the object is created, and
will never change during its lifetime.

To stringify a TrustedScript object, return the DOMString from its
`[[Data]]` internal slot.


### <dfn type>TrustedScriptURL</dfn> ### {#trused-script-url}

The TrustedScriptURL interface represents a string that a developer
can confidently pass into an [=injection sink=] that will parse it as a URL of
an external script resource.
These objects are immutable wrappers around a
string, constructed via a {{TrustedTypePolicy}}'s
{{TrustedTypePolicy/createScriptURL(input)|createScriptURL}} method.

<pre class="idl">
[Exposed=Window]
interface TrustedScriptURL {
  stringifier;
};
</pre>

TrustedScriptURL objects have a `[[Data]]` internal slot which holds a
USVString. The slot's value is set when the object is created, and
will never change during its lifetime.

To stringify a TrustedScriptURL object, return the USVString from its
`[[Data]]` internal slot.


### <dfn type>TrustedURL</dfn> ### {#trusted-url}

The TrustedURL interface represents a string that a developer
can confidently pass into an [=injection sink=] that will be parse it a URL of
an external resource that is not scripted.
These objects are immutable wrappers around a
string, constructed via a {{TrustedTypePolicy}}'s
{{TrustedTypePolicy/createURL(input)|createURL}} method.

<pre class="idl">
[Exposed=Window]
interface TrustedURL {
  stringifier;
};
</pre>

TrustedURL objects have a `[[Data]]` internal slot which holds a
USVString.  The slot's value is set when the object is created, and
will never change during its lifetime.

To stringify a TrustedURL object, return the USVString from its
`[[Data]]` internal slot.

## Policies ## {#policies}

Trusted Types can only be created via user-defined
and immutable policies that define rules for converting a string into
a given Trusted Type object. Policies allows the authors to specify custom,
programmatic rules that Trusted Types must adhere to.

<div class="example" id="sanitizing-policy">
Authors may define a
policy that will sanitize an HTML string, allowing only a subset of
tags and attributes that are known not to cause JavaScript
execution. Any {{TrustedHTML}} object created through this policy can then
be safely used in the application, and e.g. passed to `innerHTML`
setter - even if the input value was controlled by the attacker, the
policy rules neutralized it to adhere to policy-specific
contract.
<xmp highlight=js>
const sanitizingPolicy = TrustedTypes.createPolicy('sanitize-html', {
  createHTML: (input) => myTrustedSanitizer(input, { superSafe: 'ok'}),
});

myDiv.innerHTML = sanitizingPolicy.createHTML(untrustedValue);
</xmp>
</div>

Note: [=Trusted Type=] objects wrap values that are explicitly trusted by
the author. As such, creating a Trusted Type object instance becomes a de
facto DOM XSS [=injection sink=], and hence code that creates Trusted Type
instances is security-critical. To allow for strict control over Trusted Type
object creation we don't expose the constructors of those
directly, but require policy usage.

There can be multiple policies for a document, allowing the
applications to define different rules for different parts of the
codebase.

<div class="example" id="policy-reference">
Library initialized with a policy allowing it to load additional scripts from
a given host.
<xmp highlight=js>

const cdnScriptsPolicy = TrustedTypes.createPolicy('cdn-scripts', {
  createScriptURL(url) {
    const parsed = new URL(url, document.baseURI);
    if (parsed.origin == 'https://mycdn.example') {
      return url;
    }
    throw new TypeError('invalid URL');
  },
});

myLibrary.init({policy: cdnScriptsPolicy});
</xmp>
</div>

Note: As Trusted Type objects can only be created via policies, if
[=enforcement=] is enabled, only the policy code can introduce a DOM
XSS, and hence call-sites of the policies' factory functions are the
*only* security-sensitive code in the entire program. Only this
typically small subset of the entire code base needs to be
security-reviewed for DOM XSS - there's no need to monitor or review
the traditional DOM sinks, as User Agents [=enforcement|enforce=] that
those sinks will only accept Trusted Type objects, and these in turn
can only be created via policies.

The {{TrustedTypePolicyFactory/createPolicy()|createPolicy}} function returns a policy object whose create\* functions
will create Trusted Type objects after applying the policy
rules.

Note: While it's safe to expose a policy that sanitizes its input
(and allow any part of the application to use it), there might be a
need to create lax policies to be used internally, and only to be
called with author-controlled input. For example, a client-side HTML
templating library, an HTML sanitizer library, or a JS asynchronous
code plugin loading subsystem each will likely need full control over
HTML or URLs. The API design facilitates that - each policy may only
be used if the callsite can obtain a reference to the policy (a return
value from {{TrustedTypePolicyFactory/createPolicy()}}). As such, policy
references can be treated as
<a href="https://en.wikipedia.org/wiki/Object-capability_model">capabilities</a>,
access to which can be controlled using JavaScript techniques
(e.g. via closures, internal function variables, or modules).

<div class="example" id="policy-capability">
Unsafe no-op policy reachable only from within a single code block to ascertain
that it's called only with no attacker-controlled values.
<xmp highlight=js>
(function renderFootnote() {
  const unsafePolicy = TrustedTypes.createPolicy('html', {
    createHTML: input => input,
  });
  const footnote = await fetch('/footnote.html').then(r => r.text());
  footNote.innerHTML = unsafePolicy.createHTML(footnote);
})();
</xmp>
</div>

### <dfn type>TrustedTypePolicyFactory</dfn> ### {#trusted-type-policy-factory}

TrustedTypePolicyFactory creates
{{TrustedTypePolicy|policies}} and verifies that Trusted Type object instances
were created via one of the policies.

Note: This factory object is exposed to JavaScript through `window.TrustedTypes`
reference - see [[#extensions-to-the-window-interface]].

<pre class="idl">
[Exposed=Window] interface TrustedTypePolicyFactory {
    [Unforgeable] TrustedTypePolicy createPolicy(
        DOMString policyName, optional TrustedTypePolicyOptions policyOptions);
    [Unforgeable] sequence&lt;DOMString> getPolicyNames();
    [Unforgeable] boolean isHTML(any value);
    [Unforgeable] boolean isScript(any value);
    [Unforgeable] boolean isScriptURL(any value);
    [Unforgeable] boolean isURL(any value);
    [Unforgeable] readonly attribute TrustedHTML emptyHTML;
};
</pre>

Internal slot `[[DefaultPolicy]]` may contain a {{TrustedTypePolicy}} object,
and is initially empty.

Internal slot `[[CreatedPolicyNames]]` is an <a>ordered set</a> of strings,
initially empty.

<div dfn-type="method" dfn-for="TrustedTypePolicyFactory">

:   <dfn>createPolicy(policyName, policyOptions)</dfn>
::  Creates a uniquely named policy object that will implement the rules
    passed in the {{TrustedTypePolicyOptions}} object. Allowed policy names
    may be restricted by the [=Trusted-Types HTTP Response Header=] - if that
    is present, and the policy name is not on the whitelist defined in the
    header, the policy creation fails with a [[WebIDL-1#idl-Error|TypeError]].
    Also, if createPolicy is called more than once with any given policyName,
    policy creation fails with a TypeError.

    <div class="example" id="create-policy-example">
    <xmp highlight=js>
    // HTTP Response header: Content-Security-Policy: trusted-types foo
    TrustedTypes.createPolicy("foo", {}); // ok.
    TrustedTypes.createPolicy("bar", {}); // throws - name not on the whitelist.
    TrustedTypes.createPolicy("foo", {}); // throws - duplicate name.
    </xmp>
    </div>

    Returns the result of executing a [$Create a Trusted Type Policy$] algorithm,
    with the following arguments:
    <dl>
    <dt>factory</dt>
    <dd>[[DOM#context-object|context object]]</dd>
    <dt>policyName</dt>
    <dd>policyName</dt>
    <dt>global</dt>
    <dd><a>relevant global object</a></dd>
    </dl>

: <dfn>getPolicyNames()</dfn>
::  Returns a new list, comprising of all entries  of the
    `[[CreatedPolicyNames]]` slot.

: <dfn>isHTML(value)</dfn>
:: Returns true if value is an instance of {{TrustedHTML}} and has its `[[Data]]`  internal slot set, false otherwise.

    Note: `is*` functions are used to check if a given object is truly a legitimate
    [=Trusted Type=] object (e.g. it was created via one of the configured
    policies). This is to be able to detect a forgery of the objects via
    e.g. [[ECMASCRIPT#sec-object.create|Object.create]]
    or prototype chains manipulation.

    <div class="example" id="is-html-example">
    <xmp highlight=js>
    const html = policy.createHTML('<div>');
    TrustedTypes.isHTML(html) // true

    const fake = Object.create(TrustedHTML.prototype);
    TrustedTypes.isHTML(fake) // false

    TrustedTypes.isHTML("<div>plain string</div>") // false
    </xmp>
    </div>


: <dfn>isScript(value)</dfn>
:: Returns true if value is an instance of {{TrustedScript}} and has its `[[Data]]` internal slot set, false otherwise.

: <dfn>isScriptURL(value)</dfn>
:: Returns true if value is an instance of {{TrustedScriptURL}} and has its `[[Data]]` internal slot set, false otherwise.

: <dfn>isURL(value)</dfn>
:: Returns true if value is an instance of {{TrustedURL}} and has its `[[Data]]` internal slot set, false otherwise.

</div>

<div class="example" id="create-and-used-unexposed-policy">
<xmp highlight="js">
const myPolicy = TrustedTypes.createPolicy('myPolicy', {
  // This needs security review, as it's security critical code;
  // a flaw in this code could cause DOM XSS.
  createHTML(input) { return ASanitizer.sanitize(input) },
  createScriptURL(input) {
    const u = new URL(dirty, document.baseURI);
    if (APPLICATION_CONFIG.scriptOrigins.includes(u.origin)) {
      return u.href;
    }
    throw new Error('Cannot load scripts from this origin');
  },
});
TrustedTypes.getPolicyNames();
// ['myPolicy']

document.querySelector("#foo").innerHTML = myPolicy.createHTML(aValue);
scriptElement.src = myPolicy.createScriptURL(
    'https://scripts.myapp.example/script.js');
</xmp>
</div>

<div dfn-type="attribute" dfn-for="TrustedTypePolicyFactory">

: <dfn>emptyHTML</dfn>
:: is a {{TrustedHTML}} object with its `[[Data]]` internal slot value set to an empty string.

</div>

### <dfn type>TrustedTypePolicy</dfn> ### {#trusted-type-policy}

Policy objects implement a TrustedTypePolicy interface and define a
group of functions creating Trusted Type objects. Each policy is
identified by a name unique within a realm. Each of the create
functions converts a string value to a given Trusted Type variant, or
throws a TypeError if a conversion of a given value is disallowed.

<pre class="idl">
[Exposed=Window]
interface TrustedTypePolicy {
  [Unforgeable] readonly attribute DOMString name;
  [Unforgeable] TrustedHTML createHTML(DOMString input);
  [Unforgeable] TrustedScript createScript(DOMString input);
  [Unforgeable] TrustedScriptURL createScriptURL(DOMString input);
  [Unforgeable] TrustedURL createURL(DOMString input);
};
</pre>

Each TrustedTypePolicy object has an `[[options]]` internal slot, holding the {{TrustedTypePolicyOptions}} object describing the actual behavior of the policy.

<div dfn-type="method" dfn-for="TrustedTypePolicy">

: <dfn>createHTML(input)</dfn>
::  Returns the
    result of executing the [$Create a Trusted Type$] algorithm, with the
    following arguments:
    <dl>
      <dt>policy</dt>
      <dd>[[DOM#context-object|context object]]</dt>
      <dt>trustedTypeName</dt>
      <dd>`"TrustedHTML"`</dd>
      <dt>value</dt>
      <dd>input</dd>
    </dl>

: <dfn>createScript(input)</dfn>
::  Returns the
    result of executing the [$Create a Trusted Type$] algorithm, with the
    following arguments:
    <dl>
      <dt>policy</dt>
      <dd>[[DOM#context-object|context object]]</dt>
      <dt>trustedTypeName</dt>
      <dd>`"TrustedScript"`</dd>
      <dt>value</dt>
      <dd>input</dd>
    </dl>


: <dfn>createScriptURL(input)</dfn>
::  Returns the
    result of executing the [$Create a Trusted Type$] algorithm, with the
    following arguments:
    <dl>
      <dt>policy</dt>
      <dd>[[DOM#context-object|context object]]</dt>
      <dt>trustedTypeName</dt>
      <dd>`"TrustedScriptURL"`</dd>
      <dt>value</dt>
      <dd>input</dd>
    </dl>


: <dfn>createURL(input)</dfn>
::  Returns the
    result of executing the [$Create a Trusted Type$] algorithm, with the
    following arguments:
    <dl>
      <dt>policy</dt>
      <dd>[[DOM#context-object|context object]]</dt>
      <dt>trustedTypeName</dt>
      <dd>`"TrustedURL"`</dd>
      <dt>value</dt>
      <dd>input</dd>
    </dl>


</div>

### <dfn type>TrustedTypePolicyOptions</dfn> ### {#trusted-type-policy-options}

This dictionary holds author-defined functions for converting string
values into trusted values. These functions do not create [=Trusted Type=]
object instances directly - this behavior is provided by
{{TrustedTypePolicy}}.

<pre class="idl">
dictionary TrustedTypePolicyOptions {
   CreateHTMLCallback? createHTML;
   CreateScriptCallback? createScript;
   CreateURLCallback? createURL;
   CreateScriptURLCallback? createScriptURL;
};
callback CreateHTMLCallback = DOMString (DOMString input);
callback CreateScriptCallback = DOMString (DOMString input);
callback CreateURLCallback = USVString (DOMString input);
callback CreateScriptURLCallback = USVString (DOMString input);
</pre>

### <dfn>Default policy</dfn> ### {#default-policy-hdr}

*This section is not normative.*

One of the policies, the `default` policy, is special; while all other
policies have to be called explicitly to create a TrustedType object,
the default policy can also be called implicitly by the user agent. It
allows the application to define the rules that should be run as a
fallback, in case an [=injection sink=] is passed a string (instead of a
Trusted Type object).

This optional behavior allows for introducing Trusted Type [=enforcement=]
to applications that are still using legacy code that writes to the DOM
(or calls `eval`) directly. Needless to say, this policy should
necessarily be defined with very strict rules not to introduce a DOM
XSS vulnerability in unknown parts of the application. In an extreme
case, a lax, no-op default policy could bring the application DOM XSS
security posture back to the pre-Trusted Types level. If possible,
authors should resort to a default policy in a transitional period
only, use it to detect and rewrite "raw DOM writes" dependencies and
eventually phase out its usage entirely.

Note: See [[#get-trusted-type-compliant-string-algorithm]] for details on how
the default policy is applied.


## <dfn>Enforcement</dfn> ## {#enforcement-hdr}

Note: Enforcement is the process of checking that a value
has an appropriate type before it reaches an [=injection sink=].

While the JavaScript API that allows authors to create Trusted Types is always
available (via {{Window/TrustedTypes}}), the enforcement is optional.
Applications may opt-in to require [=Trusted Types=] values for their [=injection sinks=]
via [[CSP#policy-delivery|configuring a Content-Security-Policy]]
for their documents. This document defines a new [=trusted-types-directive|trusted-types=]
Content Security Policy directive controlling that behavior.

This allows the authors to prepare their applicaiton for enforcing Trusted Types
via using the {{CSP#csp-ro|Content-Security-Report-Only}} HTTP Response header.

Note: Most of the enforcement rules are defined as modifications of the
algorithms in other specifiactions, see [[#integrations]].

# Algorithms # {#algorithms}

## Policies ## {#policy-algorithms}

### <dfn abstract-op>Create a Trusted Type Policy</dfn> ### {#create-trusted-type-policy-algorithm}

To create a {{TrustedTypePolicy}} in a {{TrustedTypePolicyFactory|factory}},
given a DOMString (|policyName|), policy options dictionary (|options|), and a
[=Realm/global object=] (|global|) run these steps:

1.  Let |allowedByCSP| be the result of executing [$Should Trusted Type policy
    creation be blocked by Content Security Policy?$] algorithm with |global|,
    |policyName| and |factory|'s `[[CreatedPolicyNames]]` slot value.
1.  If |allowedByCSP| is `"Blocked"`, throw a {{TypeError}} and abort further steps.
1.  Let |policy| be a new {{TrustedTypePolicy}} object.
1.  Set |policy|'s `name` property value to |policyName|.
1.  Let |policyOptions| be a new {{TrustedTypePolicyOptions}} object.
1.  Set |policyOptions|
    {{TrustedTypePolicy/createHTML(input)|createHTML}} property to |option|'s
    {{TrustedTypePolicyOptions/createHTML|createHTML}} property value.
1.  Set |policyOptions| {{TrustedTypePolicy/createScript()|createScript}}
    property to |option|'s
    {{TrustedTypePolicyOptions/createScript|createScript}} property value.
1.  Set |policyOptions| {{TrustedTypePolicy/createScriptURL()|createScriptURL}}
    property to |option|'s
    {{TrustedTypePolicyOptions/createScriptURL|createScriptURL}} property value.
1.  Set |policyOptions| {{TrustedTypePolicy/createURL()|createURL}}
    property to |option|'s
    {{TrustedTypePolicyOptions/createURL|createURL}} property value.
1.  Set |policy|'s `[[options]]` internal slot value to *policyOptions*.
1.  If the |policyName| is the [=ASCII case-sensitive=] match for the string
    `default`, set the |factory|'s `[[DefaultPolicy]]` slot value to |policy|.
1.  Append |policyName| to |factory|'s `[[CreatedPolicyNames]]`.
1.  Return |policy|.

### <dfn abstract-op>Get default policy</dfn> ### {#get-default-policy-algorithm}
To get the [=default policy=] for a *factory*, execute the following steps:

1.  Return the value of |factory|'s `[[DefaultPolicy]]` slot
    (null if the slot is empty).

### <dfn abstract-op>Create a Trusted Type</dfn> ### {#create-a-trusted-type-algorithm}

Given a {{TrustedTypePolicy}} |policy|, a type name |trustedTypeName|,
and a string |value|, execute the following steps:


1.  Let |functionName| be a function name for the given |trustedTypeName|,
    based on the following table:

    <table>
      <tr>
        <th>Function name</th>
        <th>Trusted Type name </th>
      </tr>
      <tr>
        <td>"createHTML"</td>
        <td>"TrustedHTML"</td>
      </tr>
      <tr>
        <td>"createScript"</td>
        <td>"TrustedScript"</td>
      </tr>
      <tr>
        <td>"createScriptURL"</td>
        <td>"TrustedScriptURL"</td>
      </tr>
      <tr>
        <td>"createURL"</td>
        <td>"TrustedURL"</td>
      </tr>
    </table>

1.  Let |options| be the value of |policy|'s `[[options]]` slot.
1.  Let |function| be the value of the property in |options| named |functionName|.
1.  If |function| is `null`, throw a {{TypeError}}.
1.  Let |policyValue| be the result of invoking |function| with
    |value| as a first argument, and [[ECMASCRIPT#sec-method|callback **this** value]]
    set to `null`.
1.  If |policyValue| is an error, return |policyValue| and abort the following steps.
1.  Let |dataString| be the result of stringifying |policyValue|.
1.  Let |trustedObject| be a new instance of an interface with a type
    name |trustedTypeName|, with its `[[Data]]` internal slot value
    set to |dataString|.
1.  Return |trustedObject|.

## Enforcement ## {#enforcement-algorithms}

### <dfn abstract-op>Get Trusted Type compliant string</dfn> ### {#get-trusted-type-compliant-string-algorithm}

This algorithm will return a string that can be assigned to a DOM
[=injection sink=], optionally unwrapping it from a matching [=Trusted Type=].
It will ensure that the Trusted Type [=enforcement=] rules were respected.

Given a {{TrustedType}} type (|expectedType|), a {{Document}}
(|document|), and a {{TrustedType}} or a string (|input|) run these steps:

1.  Let |sink| be an empty string.

    Issue: Get the sink from the callers.
1.  Let |cspList| be the |document|'s <a>CSP list</a>.
1.  If |cspList| does not contain a [[CSP3#content-security-policy-object|policy]]
    which <a>directive set</a> containing a [[CSP3#directives|directive]] with a name `"trusted-types"`,
    return stringified |input| and abort these steps.
1.  If |input| has type |expectedType|, return stringified
    |input| and abort these steps.
1.  Otherwise, execute the following steps:
    1.  Let |defaultPolicy| be the result of executing
        [$Get default policy$] algorithm on |document|’s
        [[HTML5#concept-document-bc|browsing context]]'s {{Window}}
        object.
    1.  If |defaultPolicy| is `null`, abort these steps and resume below.
    1.  Let |convertedInput| be the result of executing [$Create a
        Trusted Type$] algorithm, with the following arguments:
        *  |defaultPolicy| as |policy|
        *  |input| as |value|
        *  |expectedType|’s type name as |trustedTypeName|
    1.  If |convertedInput| is an error, abort the following steps.
    1.  If |convertedInput| has type |expectedType|, then return
        stringified |convertedInput| and abort the following steps.
    1.  Set |input| to |convertedInput|’s value.
1.  Let |disposition| be the result of executing [$Should sink type mismatch violation be blocked by Content Security Policy?$] algorithm,
    passing |document|, |input| as |source|, and |sink|.
1.  If |disposition| is `“Allowed”`, then return stringified |input| and abort these steps.
1.  Throw a {{TypeError}}.

    Issue: Populate the TypeError object.


# Integrations # {#integrations}

<pre class="idl">
typedef (DOMString or TrustedHTML) HTMLString;
typedef (DOMString or TrustedScript) ScriptString;
typedef (USVString or TrustedScriptURL) ScriptURLString;
typedef (USVString or TrustedURL) URLString;
typedef (TrustedHTML or TrustedScript or TrustedScriptURL or TrustedURL) TrustedType;

typedef (([TreatNullAs=EmptyString] DOMString) or TrustedHTML) HTMLStringDefaultsEmpty;
</pre>

Note: {{HTMLStringDefaultsEmpty}} is a non-nullable variant that accepts *null* on set.
Having this separate type allows [[webidl#TreatNullAs]] to attach to DOMString
per heycam/webidl#441.

Issue(WICG/trusted-types#2): [[webidl#TreatNullAs|TreatNullAs=EmptyString]] is confusing.
See note "It should not be used in specifications unless ...".
For some sinks a `null` value will result in "", and "null" for others.
This already caused problems in the polyfill.

## Integration with HTML ## {#integration-with-html}

{{Window}} objects have a {{Window/TrustedTypes|trusted type policy factory}},
which is a {{TrustedTypePolicyFactory}} object.

### Extensions to the Window interface ### {#extensions-to-the-window-interface}

This document extends the {{Window}} interface defined by [[HTML5|HTML]]:

<pre class="idl">
partial interface mixin Window {
  [Unforgeable] readonly attribute
      TrustedTypePolicyFactory TrustedTypes;

  WindowProxy? open(
      [TrustedTypes=TrustedURL] optional URLString url = "about:blank",
      optional DOMString target = "_blank",
      optional ([TreatNullAs=EmptyString] DOMString) features = "");
};
</pre>

{{Window/TrustedTypes}} returns the [[#integration-with-html|trusted
type policy factory]] of the current {{Window}}, if the current Window
has a trusted type policy factory, or `null` otherwise.

### Extensions to the Document interface ### {#extensions-to-the-document-interface}

This document modifies the {{Document}} interface defined by [[HTML5|HTML]]:

<pre class="idl">
partial interface mixin Document {
  WindowProxy? open([TrustedTypes=TrustedURL] URLString url, DOMString name, DOMString features);
  [CEReactions] void write([TrustedTypes=TrustedHTML] HTMLString... text);
  [CEReactions] void writeln([TrustedTypes=TrustedHTML] HTMLString... text);
};
</pre>

Note: This document does not affect the two argument form of
[[HTML/dynamic-markup-insertion#dom-document-open|document.open]].

### Extensions to the Location interface ### {#extensions-to-the-location-interface}

This document modifies the {{Location}} interface defined by [[HTML5|HTML]]:

<pre class="idl">
partial interface mixin Location {
  [Unforgeable, TrustedTypes=TrustedURL] stringifier attribute URLString href;
  [Unforgeable] void assign([TrustedTypes=TrustedURL] URLString url);
  [Unforgeable] void replace([TrustedTypes=TrustedURL] URLString url);
};
</pre>

### Enforcement in element attributes ### {#enforcement-in-sinks}

This document modifies following IDL attributes of various DOM elements:

<pre class="idl">
partial interface mixin HTMLScriptElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedScriptURL] attribute ScriptURLString src;
  [CEReactions, TrustedTypes=TrustedScript] attribute ScriptString text;
};

partial interface mixin HTMLIFrameElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
  [CEReactions, TrustedTypes=TrustedHTML] attribute HTMLString srcdoc;
};

partial interface HTMLEmbedElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedScriptURL] attribute ScriptURLString src;
};

partial interface HTMLObjectElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedScriptURL] attribute ScriptURLString data;
  [CEReactions, TrustedTypes=TrustedScriptURL] attribute DOMString codeBase; // obsolete
};

partial interface HTMLLinkElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString href;
};

partial interface HTMLFrameElement : HTMLElement { // obsolete
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
};

partial interface HTMLImageElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
};

partial interface HTMLFormElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString action;
};

partial interface HTMLInputElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString formAction;
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
};

partial interface HTMLButtonElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString formAction;
};

partial interface mixin HTMLHyperlinkElementUtils {
  [CEReactions, TrustedTypes=TrustedURL] stringifier attribute URLString href;
};

partial interface HTMLBaseElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString href;
};

partial interface HTMLMediaElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
};

partial interface HTMLSourceElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
};

partial interface HTMLTrackElement : HTMLElement {
  [CEReactions, TrustedTypes=TrustedURL] attribute URLString src;
};

// TODO: Add HTMLPortalElement.src from https://github.com/WICG/portals once it's specced.
</pre>

### Enforcement for script text contents ### {#enforcement-in-script-text}

This document modifies how {{HTMLScriptElement}} [=child text content=] can be set to allow documents to control dynamically created scripts. It does so by
adding the {{HTMLElement/innerText}} and {{Node/textContent}} attributes directly on {{HTMLScriptElement}}. The behavior of the attributes remains the same
as in their original counterparts, apart from additional behavior triggered by the {{TrustedTypes}} extended attribute presence.

<pre class="idl">
partial interface mixin HTMLScriptElement : HTMLElement {
 [CEReactions, TrustedTypes=TrustedScript] attribute [TreatNullAs=EmptyString] ScriptString innerText;
 [CEReactions, TrustedTypes=TrustedScript] attribute ScriptString? textContent;
};
</pre>

Additionally, this document defines [$insert text node validation steps$] for {{HTMLScriptElement}} to ascertain that text nodes inserted to {{HTMLScriptElement}} elements will satisfy Trusted Types restrictions:

1.  Let |disposition| be |parent|’s [=Node/node document=]'s {{TrustedTypeConfiguration}}'s
    {{TrustedTypeConfiguration/domSinks}}.
1.  If |disposition| is `“unsafe-allow”`, abort the following steps.
1.  Let |text| be |node|'s [=child text content=].
1.  Let |convertedText| be the result of running [$Get Trusted Type compliant string$], passing |parent|'s [=Node/node document=] as *document*, {{TrustedScript}} as *expectedType* and |text| as input.
    If the algorithm threw an error, rethrow the error.
1.  Set |node|'s data to |convertedText|.

Note: This prevent calling ChildNode.after(aTrustedScript, ...), as the type information is lost before insert is run. To fix that, an additional metadata in Text nodes would be needed. Removed that use case for simplicity.

### Enforcement in timer functions ### {#enforcement-in-timer-functions}

This document modifies the {{WindowOrWorkerGlobalScope}} interface mixin:

<pre class="idl">
typedef (ScriptString or Function) TrustedTimerHandler;

partial interface mixin WindowOrWorkerGlobalScope {
  long setTimeout(TrustedTimerHandler handler, optional long timeout = 0, any... arguments);
  long setInterval(TrustedTimerHandler handler, optional long timeout = 0, any... arguments);
};
</pre>

To the [[HTML5#timer-initialisation-steps|timer initialization steps algorithm]],
add this step between 7.1 and 7.2:

1.  If the first operation argument is not a {{Function}}, or if the first operation argument is a {{TrustedType}}, set the first operation argument to the result of executing
    the [$Get Trusted Type compliant string$] algorithm, with
    *   *document* set to the document of the method content proxy.
    *   *input* set to the first method argument, and
    *   *expectedType* set to {{TrustedScript}}.

Note: This makes sure that a {{TrustedScript}} is passed to timer
functions in place of a string when Trusted Types are enforced, but
also unconditionally accepts any {{Function}} object.

### Enforcement in event handler content attributes ### {#enforcement-in-event-handler-content-attributes}

This document modifies the
[[HTML5#event-handler-content-attributes|attribute change steps for an event handler content attribute]].

At the beginning of step 5, insert the following steps:

1.  Let *value* be the result of executing the
    [$Get Trusted Type compliant string$] algorithm, with
    *   *document* set to the owner document of *eventTarget*,
    *   *input* set to *value*,
    *   *expectedType* set to {{TrustedScript}}
1.  If the algorithm throws an error, abort these steps.

## Integration with DOM ## {#integration-with-dom}

### Text node validation steps ### {#dom-text-node-validation}

Add the following step at the beginning of step 7 of [[DOM#concept-node-insert|insert]] algorithm.

1. If |node| is a {{Text}} node, run [$insert text node validation steps$] for |parent|, passing |node| and |parent| as parameters.

<dfn abstract-op>insert text node validation steps</dfn> may be defined by other specifications.

## Integration with DOM Parsing ## {#integration-with-dom-parsing}

This document modifies the following interfaces defined by [[DOM-Parsing]]:

<pre class="idl">
partial interface Element {
  [CEReactions, TrustedTypes=TrustedHTML] attribute HTMLStringDefaultsEmpty outerHTML;
  [CEReactions] void insertAdjacentHTML(DOMString position, [TrustedTypes=TrustedHTML] HTMLString text);
};

partial interface mixin InnerHTML { // specified in a draft version at https://w3c.github.io/DOM-Parsing/#the-innerhtml-mixin
  [CEReactions, TrustedTypes=TrustedHTML] attribute HTMLStringDefaultsEmpty innerHTML;
};

partial interface Range {
  [CEReactions, NewObject] DocumentFragment createContextualFragment([TrustedTypes=TrustedHTML] HTMLString fragment);
};

[Constructor, Exposed=Window]
interface DOMParser {
  [NewObject] Document parseFromString([TrustedTypes=TrustedHTML] HTMLString str, SupportedType type);
};
</pre>

## Integration with Content-Security-Policy ## {#integration-with-content-security-policy}

### <dfn lt="trusted-types-directive">trusted-types</dfn> directive ### {#trusted-types-csp-directive}

This document defines *trusted-types* - a new [[CSP3#directives|Content Security Policy directive]].

{{#trusted-types-directive|trusted-types}} directive configures the Trusted
Types framework for all the documents in a current realm. Specifically, it
defines which policies (identified by name) can be created, and what should
be the behavior when a string value is passed to an [=injection sink=]
(i.e. should the type-based enforcement be enabled).

The syntax for the directive's [=directive/name=] and [=directive/value=] is described by the following
ABNF:

<pre>
directive-name = "trusted-types"
directive-value = <a>serialized-tt-configuration</a>
<dfn>serialized-tt-configuration</dfn> = ( <a>tt-expression</a> *( <a href="https://w3c.github.io/webappsec-csp/#grammardef-required-ascii-whitespace">required-ascii-whitespace</a> <a>tt-expression</a> ) )
<dfn>tt-expression</dfn> = "*" / <a>tt-policy-name</a> ; In the future, add keywords
<dfn>tt-policy-name</dfn> = 1*( %x21-%x26 / %x28-%x29 / %x2B / %x2D-%x3A / %x3C-%x7E )
; Policy name can consist of any <a href="https://tools.ietf.org/html/rfc5234#appendix-B.1">VCHAR</a> character, apart from ";", ",", "*" and "'".
</pre>

<div class="example" id="whitelist-of-policy-names-in-header">
Types are enforced at sinks, and only policies named “one” and “two”
may be created.

<pre class="http">
Content-Security-Policy: trusted-types one two
</pre>
</div>

<div class="example" id="header-that-allows-no-policy-names">
An empty [=directive=] [=directive/value=] indicates policies may not be created,
and sinks expect Trusted Type values.  I.e. no [=injection sinks=] can be used
in a document.

<pre class="http">
Content-Security-Policy: trusted-types
</pre>
</div>

Value `*` makes it possible to create policies with any
previously unused name.

<div class="example" id="wildcard-policy-name-in-header">
<pre class="http">
Content-Security-Policy: trusted-types *
</pre>
</div>

If the policy named `default` is present in the list, it refers to the
[=default policy=], and unless otherwise configured,
all strings passed to [=injection sinks=] will be passed through it instead
of being rejected outright.

<div class="example" id="default-in-header">
<pre class="http">
Content-Security-Policy: trusted-types one two default
</pre>
</div>

Issue(WICG/trusted-types#66): Decide if separate per-type enforcement settings should be exposed to the authors.

### <dfn abstract-op>Should sink type mismatch violation be blocked by Content Security Policy?</dfn> ### {#should-block-sink-type-mismatch}

Given a {{Document}} (|document|), a string (|sink|) and a string (|source|) this algorithm
returns `"Blocked"` if the [=injection sink=] requires a [=Trusted Type=], and
`"Allowed"` otherwise.

1.  Let |result| be `"Allowed"`.
1.  For each |policy| in |document|'s [=Realm/global object=]'s <a>CSP list</a>:
    1.  If |policy|'s <a>directive set</a> does not contain a <a>directive</a>
        which [=directive/name=] is `"trusted-types"`, skip to the next |policy|.
    1.  Let |violation| be the result of executing
        [[CSP#create-violation-for-global|Create a violation object for global, policy, and directive]] on the
        <a>current settings object</a>'s [=Realm/global object=], |policy| and
        `"trusted-types"`
    1. Set |violation|'s [=violation/resource=] to `"trusted-types-sink"`.
    1. Let |sample| be the result of [=concatenate|concatenating=] the list << |sink|, |source| >> using space (`"\x20"`) as a |separator|.
    1. Set |violation|'s [=violation/sample=] to the substring of |sample|, containing its first 40 characters.
    1.  Execute [[CSP#report-violation|Report a violation]] on |violation|.
    1.  If |policy|'s [=policy/disposition=] is `"enforce"`, then set |result| to
        `"Blocked"`.
1. Return |result|.

### <dfn abstract-op>Should Trusted Type policy creation be blocked by Content Security Policy?</dfn> ### {#should-block-create-policy}

Given a [=Realm/global object=] (|global|), a string (|policyName|) and a list of
strings (|createdPolicyNames|), this algorithm returns `"Blocked"` if the
[=Trusted Type Policy=] should not be created, and `"Allowed"` otherwise.

1.  Let |result| be `"Allowed"`.
1.  For each |policy| in |global|'s <a>CSP list</a>:
    1.  Let |reason| be an empty string.
    1.  If |policy|'s <a>directive set</a> does not contain a <a>directive</a>
        which name is `"trusted-types"`, skip to the next |policy|.
    1.  Let |directive| be the |policy|'s |directive set|'s [=directive=] which name
        is `"trusted-types"`
    1.  If |directive|'s [=directive/value=] contains a <a>tt-expression</a> which is a match
        for a value `*`, skip to the next |policy|.

        Note: `trusted-types *` allows authors to create policies with
        duplicated names.
    1.  If |createdPolicyNames| contains |policyName|, set |reason| to `"duplicate-name"`.
    1.  If |directive|'s [=directive/value=] does not contain a <a>tt-policy-name</a>, which is an
        [=ASCII case-sensitive=] match for the value |policyName|, set |reason| to `"disallowed-name"`
    1.  If |reason| is an empty string, skip to the next |policy|.
    1.  Let |violation| be the result of executing
        [[CSP#create-violation-for-global|Create a violation object for global, policy, and directive]] on the
        <a>current settings object</a>'s [=Realm/global object=], |policy| and
        `"trusted-types"`
    1. Set |violation|'s [=violation/resource=] to `"trusted-types-policy"`.
    1. Set |violation|'s [=violation/sample=] to the substring of |policyName|, containing its first 40 characters.
    1.  Execute [[CSP#report-violation|Report a violation]] on |violation|.
    1.  If |policy|'s [=policy/disposition=] is `"enforce"`, then set |result| to
        `"Blocked"`.
1. Return |result|.

### Violation object changes ### {#csp-violation-object-hdr}

[=violation|Violation=] object [=violation/resource=] also allows `"trusted-types-policy"`
and `"trusted-types-sink"` as values.

### 'trusted-script' keyword ### {#trusted-script-csp-keyword}

Note: See <a href="https://github.com/tc39/ecma262/issues/938">TC39/ecma262 issue #938</a>
(adding the value to be compiled to algorithm parameters).

<div class="note">Note: EcmaScript code may call `Function()` and `eval` cross realm.
<pre highlight="js">
  let f = new self.top.Function(source);
</pre>
In this case, the |callerRealm|'s Window is `self` and the |calleeRealm|'s Window is `self.top`.
The Trusted Types portion of this algorithm uses |calleeRealm| for consistency with other sinks.
<pre highlight="js">
  // Assigning a string to another Realm's DOM sink uses that Realm's default policy.
  self.top.body.innerHTML = 'Hello, World!';
  // Using another Realm's builtin Function constructor should analogously use that
  // Realm's default policy.
  new self.top.Function('alert(1)')()
</pre>
This is subtly different from the CSP directive enforcement portion which rejects if either
the |calleeRealm| or |callerRealm|'s Content-Security-Policy rejects string compilation.
</div>

This document modifies the grammar for [[CSP3#keyword-source]]:

<pre dfn-type="grammar" link-type="grammar">
  <dfn>keyword-source</dfn> = "'self'" / "'unsafe-inline'" / "'unsafe-eval'"
                       / "'strict-dynamic'" / "'unsafe-hashes'" / "'report-sample'"
                       / "'unsafe-allow-redirects'" <ins>/ "<dfn>'trusted-script'</dfn>"</ins>
</pre>

This document modifies the [[CSP3#can-compile-strings|EnsureCSPDoesNotBlockStringCompilation]]
which is reproduced in its entirety below with additions and deletions.

Given two [[ECMASCRIPT#realm|realms]] (|callerRealm| and
|calleeRealm|), and a <del>string</del> <ins>value</ins>
(|source|), this algorithm returns <del>normally</del>
<ins>the source string to compile</ins> if compilation is allowed, and
throws an "`EvalError`" if not:

1.  <ins>Let |document| be |calleeRealm|’s
    [[HTML5#environment-settings-object|environment setting object]]'s
    [[HTML5#responsible-document|responsible document]].</ins>

2.  <ins>Let |sourceString| be the result of executing the
    [$Get Trusted Type compliant string$] algorithm, with:
    *   |document| as |document|,
    *   |source| as |input|,
    *   {{TrustedScript}} as |expectedType|.</ins>

3.  <ins>If the algorithm throws an error, throw an {{EvalError}}.</ins>

4.  <ins>Let |isExempt| be the result of executing the [$IsSourceExempt$] algorithm with:
    *   |document|’s {{CSP list}} as |cspList|.</ins>

5.  Let |globals| be a list containing |calleeRealm|'s [=Realm/global object=] and |calleeRealm|'s
    [=Realm/global object=].

6.  For each |global| in |globals|:

    1.  Let |result| be "`Allowed`".

    2.  For each |policy| in |global|'s [[CSP#global-object-csp-list|CSP list]]:

        1.  Let |source-list| be `null`.

        2.  If |policy| contains a [=directive=] whose [=directive/name=] is "`script-src`", then
            set |source-list| to that [=directive=]'s [=directive/value=].

            Otherwise if |policy| contains a [=directive=] whose [=directive/name=] is
            "`default-src`", then set |source-list| to that directive's [=directive/value=].

        3.  If |source-list| is not `null`, and does not contain a [=source expression=] which is
            an [=ASCII case-insensitive=] match for the string "<a grammar>`'unsafe-eval'`</a>", <ins>and
            it is the case that (|isExempt| is not true or |source-list| does not contain a
            [=source expression=] which is an [=ASCII case-insensitive=] match for the
            string "<a grammar>`'trusted-script'`</a>")</ins> then:

            1.  Let |violation| be the result of executing [[CSP3#create-violation-for-global]] on
                |global|, |policy|, and "`script-src`".

            2.  Set |violation|'s [=violation/resource=] to "`inline`".

            3.  If |source-list| [=list/contains=] the expression
                "<a grammar>`'report-sample'`</a>", then set |violation|'s [=violation/sample=] to
                the substring of <del>|source|</del> <ins>|sourceString|</ins> containing its first
                40 characters.

            4.  Execute [[CSP3#report-violation]] on |violation|.

            5.  If |policy|'s [=policy/disposition=] is "`enforce`", then set |result| to
                "`Blocked`".

    3.  If |result| is "`Blocked`", throw an `EvalError` exception.

9. <ins>Return |sourceString|.</ins>

Note: returning |sourceString| means that the string that gets
compiled is that returned by any [=default policy=] in the course of
executing [$Get Trusted Type compliant string$].

Issue: This depends on a solution to
<a href="https://github.com/WICG/trusted-types/issues/144">issue #144</a> like <a
href="https://github.com/tc39-transfer/dynamic-code-brand-checks#problem-host-callout-does-not-receive-type-information">TC39 HostBeforeCompile</a>

Issue: In some cases, the violation "`'report-sample'`" contain the result of
applying the default policy to a string argument which differs.
Specifically when, there is a [=default policy=], |isExempt| is false,
and |source| there is a CSP policy for either the |callerRealm|
or |callerRealm| that disallows "`'unsafe-eval'"`.
Is this a feature or a bug?

Note: The previous algorithm reports violations via both report-uris where
callerRealm != calleeRealm.  If [$Get Trusted Type compliant string$] reports an
error, it only reports it via its |calleeRealm|'s report-uri.


### <dfn abstract-op>IsSourceExempt</dfn> Algorithm ### {#is-source-exempt-algorithm}

The IsSourceExempt algorithm takes a {{CSP List}} (|cspList|) and executes
the following steps:

1.  If |cspList| contains a [[CSP3#content-security-policy-object|policy]] whose
    <a>directive set</a> contains a [[CSP3#directives|directive]] with a name
    `"trusted-types"`, return true.
1.  Return false.

Note: This checks whether Trusted Types enforcement would have rejected the
input, were it problematic in the callout to [$Get Trusted Type compliant string$].


# Security Considerations # {#security-considerations}

Trusted Types are not intended to defend against XSS in an actively malicious
execution environment. It's assumed that the application is written by
non-malicious authors; the intent is to prevent developer mistakes that could
result in security bugs, and not to defend against first-party malicious code actively trying to bypass policy restrictions.

## Bypass vectors ## {#bypass-vectors}

Issue(WICG/trusted-types#49): Mention node-adoption bypass vectors.

Issue(WICG/trusted-types#64): Mention anchor element properties bypass.


Issue(WICG/trusted-types#47): Mention text/attribute node copy bypass vectors.

Issue(WICG/trusted-types#42): Mention bypass vectors with template elements.

Issue(WICG/trusted-types#6): Mention corner cases with types that depend on a different attribute value.

## Best practices for policy design ## {#best-practices-for-policy-design}

Trusted Types limit the scope of the code that can introduce DOM XSS
vulnerabilities to the implementation of [[#policies|policies]]. In this design,
insecure policies can still enable XSS. Special emphasis needs to be taken by
use policies that are either secure for all possible inputs, or limit the access
to insecure policies, such that they are only called with non-attacker
controlled inputs.

Issue(WICG/trusted-types#78): Mention the policy is global state-dependant.

Issue: Refer to the external document on secure policy design.

# Implementation Considerations # {#implementation-considerations}

## Vendor-specific Extensions and Addons ## {#vendor-specific-extensions-and-addons}

Restriction imposed by Trusted Types SHOULD
NOT interfere with the operation of user-agent features like addons,
extensions, or bookmarklets. These kinds of features generally advance
the user’s priority over page authors, as espoused in
[[html-design-principles]]. Specifically, extensions SHOULD be able to pass strings
to the DOM XSS [=injection sinks=] of the document without triggering [=default policy=]
execution, violation generation, or the rejection of the value.
